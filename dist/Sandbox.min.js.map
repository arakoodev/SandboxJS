{"version":3,"file":"Sandbox.min.js","sources":["../src/unraw.ts","../src/parser.ts","../src/executor.ts","../src/Sandbox.ts"],"sourcesContent":["/**\n * Parse a string as a base-16 number. This is more strict than `parseInt` as it\n * will not allow any other characters, including (for example) \"+\", \"-\", and\n * \".\".\n * @param hex A string containing a hexadecimal number.\n * @returns The parsed integer, or `NaN` if the string is not a valid hex\n * number.\n */\nfunction parseHexToInt(hex: string): number {\n  const isOnlyHexChars = !hex.match(/[^a-f0-9]/i);\n  return isOnlyHexChars ? parseInt(hex, 16) : NaN;\n}\n\n/**\n * Check the validity and length of a hexadecimal code and optionally enforces\n * a specific number of hex digits.\n * @param hex The string to validate and parse.\n * @param errorName The name of the error message to throw a `SyntaxError` with\n * if `hex` is invalid. This is used to index `errorMessages`.\n * @param enforcedLength If provided, will throw an error if `hex` is not\n * exactly this many characters.\n * @returns The parsed hex number as a normal number.\n * @throws {SyntaxError} If the code is not valid.\n */\nfunction validateAndParseHex(\n  hex: string,\n  errorName: string,\n  enforcedLength?: number\n): number {\n  const parsedHex = parseHexToInt(hex);\n  if (\n    Number.isNaN(parsedHex) ||\n    (enforcedLength !== undefined && enforcedLength !== hex.length)\n  ) {\n    throw new SyntaxError(errorName + ': ' + hex);\n  }\n  return parsedHex;\n}\n\n/**\n * Parse a two-digit hexadecimal character escape code.\n * @param code The two-digit hexadecimal number that represents the character to\n * output.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the code is not valid hex or is not the right\n * length.\n */\nfunction parseHexadecimalCode(code: string): string {\n  const parsedCode = validateAndParseHex(\n    code,\n    'Malformed Hexadecimal',\n    2\n  );\n  return String.fromCharCode(parsedCode);\n}\n\n/**\n * Parse a four-digit Unicode character escape code.\n * @param code The four-digit unicode number that represents the character to\n * output.\n * @param surrogateCode Optional four-digit unicode surrogate that represents\n * the other half of the character to output.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the codes are not valid hex or are not the right\n * length.\n */\nfunction parseUnicodeCode(code: string, surrogateCode?: string): string {\n  const parsedCode = validateAndParseHex(code, 'Malformed Unicode', 4);\n\n  if (surrogateCode !== undefined) {\n    const parsedSurrogateCode = validateAndParseHex(\n      surrogateCode,\n      'Malformed Unicode',\n      4\n    );\n    return String.fromCharCode(parsedCode, parsedSurrogateCode);\n  }\n\n  return String.fromCharCode(parsedCode);\n}\n\n/**\n * Test if the text is surrounded by curly braces (`{}`).\n * @param text Text to check.\n * @returns `true` if the text is in the form `{*}`.\n */\nfunction isCurlyBraced(text: string): boolean {\n  return text.charAt(0) === \"{\" && text.charAt(text.length - 1) === \"}\";\n}\n\n/**\n * Parse a Unicode code point character escape code.\n * @param codePoint A unicode escape code point, including the surrounding curly\n * braces.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the code is not valid hex or does not have the\n * surrounding curly braces.\n */\nfunction parseUnicodeCodePointCode(codePoint: string): string {\n  if (!isCurlyBraced(codePoint)) {\n    throw new SyntaxError('Malformed Unicode: +' + codePoint);\n  }\n  const withoutBraces = codePoint.slice(1, -1);\n  const parsedCode = validateAndParseHex(\n    withoutBraces,\n    'Malformed Unicode'\n  );\n\n  try {\n    return String.fromCodePoint(parsedCode);\n  } catch (err) {\n    throw err instanceof RangeError\n      ? new SyntaxError('Code Point Limit:' + parsedCode)\n      : err;\n  }\n}\n\n/**\n * Map of unescaped letters to their corresponding special JS escape characters.\n * Intentionally does not include characters that map to themselves like \"\\'\".\n */\nconst singleCharacterEscapes = new Map<string, string>([\n  [\"b\", \"\\b\"],\n  [\"f\", \"\\f\"],\n  [\"n\", \"\\n\"],\n  [\"r\", \"\\r\"],\n  [\"t\", \"\\t\"],\n  [\"v\", \"\\v\"],\n  [\"0\", \"\\0\"]\n]);\n\n/**\n * Parse a single character escape sequence and return the matching character.\n * If none is matched, defaults to `code`.\n * @param code A single character code.\n */\nfunction parseSingleCharacterCode(code: string): string {\n  return singleCharacterEscapes.get(code) || code;\n}\n\n/**\n * Matches every escape sequence possible, including invalid ones.\n *\n * All capture groups (described below) are unique (only one will match), except\n * for 4, which can only potentially match if 3 does.\n *\n * **Capture Groups:**\n * 0. A single backslash\n * 1. Hexadecimal code\n * 2. Unicode code point code with surrounding curly braces\n * 3. Unicode escape code with surrogate\n * 4. Surrogate code\n * 5. Unicode escape code without surrogate\n * 6. Octal code _NOTE: includes \"0\"._\n * 7. A single character (will never be \\, x, u, or 0-3)\n */\nconst escapeMatch = /\\\\(?:(\\\\)|x([\\s\\S]{0,2})|u(\\{[^}]*\\}?)|u([\\s\\S]{4})\\\\u([^{][\\s\\S]{0,3})|u([\\s\\S]{0,4})|([0-3]?[0-7]{1,2})|([\\s\\S])|$)/g;\n\n/**\n * Replace raw escape character strings with their escape characters.\n * @param raw A string where escape characters are represented as raw string\n * values like `\\'` rather than `'`.\n * @param allowOctals If `true`, will process the now-deprecated octal escape\n * sequences (ie, `\\111`).\n * @returns The processed string, with escape characters replaced by their\n * respective actual Unicode characters.\n */\nexport function unraw(raw: string): string {\n  return raw.replace(escapeMatch, function(\n    _,\n    backslash?: string,\n    hex?: string,\n    codePoint?: string,\n    unicodeWithSurrogate?: string,\n    surrogate?: string,\n    unicode?: string,\n    octal?: string,\n    singleCharacter?: string\n  ): string {\n    // Compare groups to undefined because empty strings mean different errors\n    // Otherwise, `\\u` would fail the same as `\\` which is wrong.\n    if (backslash !== undefined) {\n      return \"\\\\\";\n    }\n    if (hex !== undefined) {\n      return parseHexadecimalCode(hex);\n    }\n    if (codePoint !== undefined) {\n      return parseUnicodeCodePointCode(codePoint);\n    }\n    if (unicodeWithSurrogate !== undefined) {\n      return parseUnicodeCode(unicodeWithSurrogate, surrogate);\n    }\n    if (unicode !== undefined) {\n      return parseUnicodeCode(unicode);\n    }\n    if (octal === \"0\") {\n      return \"\\0\";\n    }\n    if (octal !== undefined) {\n      throw new SyntaxError('Octal Deprecation: ' + octal);\n    }\n    if (singleCharacter !== undefined) {\n      return parseSingleCharacterCode(singleCharacter);\n    }\n    throw new SyntaxError('End of string');\n  });\n}\nexport default unraw;","import unraw from \"./unraw.js\";\nexport type LispArray = Array<LispItem>&{lisp: boolean}\nexport type LispItem = Lisp|If|KeyVal|SpreadArray|SpreadObject|(LispArray)|{new(): any }|(new (...args: any[]) => any)|CodeString|String|Number|Boolean|null|undefined;\nexport interface ILiteral extends Lisp {\n  op: 'literal';\n  a: string;\n  b: LispArray;\n}\n\nexport interface IRegEx {\n  regex: string,\n  flags: string,\n  length: number\n}\n\nexport interface IConstants {\n  strings: string[];\n  literals: ILiteral[];\n  regexes: IRegEx[];\n  eager: boolean;\n}\n\nexport interface IExecutionTree {\n  tree: LispArray, \n  constants: IConstants\n}\n\ntype LispCallback = (strings: IConstants, type: string, part: CodeString, res: string[], expect: string, ctx: {lispTree: LispItem}) => any\nlet lispTypes: Map<string, LispCallback> = new Map();\n\nexport class ParseError extends Error {\n  constructor(message: string, public code: string) {\n    super(message + \": \" + code.substring(0, 40));\n  }\n}\n\nexport class Lisp {\n  op: string;\n  a?: LispItem;\n  b?: LispItem;\n  constructor(obj: Lisp) {\n    this.op = obj.op;\n    this.a = obj.a;\n    this.b = obj.b;\n  }\n}\n\nexport class If {\n  constructor(public t: any, public f: any) {}\n}\n\nexport class KeyVal {\n  constructor(public key: string, public val: any) {}\n}\n\nexport class SpreadObject {\n  constructor(public item: {[key: string]: any}) {}\n}\n\nexport class SpreadArray {\n  constructor(public item: any[]) {}\n}\n\nexport function toLispArray(arr: LispItem[]): LispArray {\n  (arr as LispArray).lisp = true;\n  return arr as LispArray;\n}\n\nconst inlineIfElse =  /^:/;\nconst elseIf = /^else(?![\\w\\$])/\nconst ifElse = /^if(?![\\w\\$])/\nconst space = /^\\s/;\n\nexport let expectTypes: {[type:string]: {types: {[type:string]: RegExp}, next: string[]}} = {\n  splitter: {\n    types: {\n      opHigh: /^(\\/|\\*\\*|\\*(?!\\*)|\\%)(?!\\=)/,\n      op: /^(\\+(?!(\\+))|\\-(?!(\\-)))(?!\\=)/,\n      comparitor: /^(<=|>=|<(?!<)|>(?!>)|!==|!=(?!\\=)|===|==)/,\n      boolOp: /^(&&|\\|\\||instanceof(?![\\w\\$])|in(?![\\w\\$]))/,\n      bitwise: /^(&(?!&)|\\|(?!\\|)|\\^|<<|>>(?!>)|>>>)(?!\\=)/,\n    },\n    next: [\n      'modifier',\n      'value', \n      'prop', \n      'incrementerBefore',\n    ]\n  },\n  inlineIf: {\n    types: {\n      inlineIf: /^\\?(?!\\.(?!\\d))/,\n    },\n    next: [\n      'expEnd'\n    ]\n  },\n  assignment: {\n    types: {\n      assignModify: /^(\\-=|\\+=|\\/=|\\*\\*=|\\*=|%=|\\^=|\\&=|\\|=|>>>=|>>=|<<=)/,\n      assign: /^(=)(?!=)/\n    },\n    next: [\n      'modifier',\n      'value', \n      'prop', \n      'incrementerBefore',\n    ]\n  },\n  incrementerBefore: {\n    types: {incrementerBefore: /^(\\+\\+|\\-\\-)/},\n    next: [\n      'prop',\n    ]\n  },\n  expEdge: {\n    types: {\n      call: /^(\\?\\.)?[\\(]/,\n      incrementerAfter: /^(\\+\\+|\\-\\-)/\n    },\n    next: [\n      'splitter',\n      'expEdge',\n      'dot',\n      'inlineIf',\n      'expEnd'\n    ]\n  },\n  modifier: {\n    types: {\n      not: /^!/,\n      inverse: /^~/,\n      negative: /^\\-(?!\\-)/,\n      positive: /^\\+(?!\\+)/,\n      typeof: /^typeof(?![\\w\\$])/,\n      delete: /^delete(?![\\w\\$])/,\n    },\n    next: [\n      'modifier', \n      'value',\n      'prop',\n      'incrementerBefore',\n    ]\n  },\n  dot: {\n    types: {\n      arrayProp: /^(\\?\\.)?\\[/,\n      dot: /^(\\?)?\\.(?=\\s*[a-zA-Z\\$\\_])/,\n    },\n    next: [\n      'splitter',\n      'assignment',\n      'expEdge',\n      'dot',\n      'inlineIf',\n      'expEnd'\n    ]\n  },\n  prop: {\n    types: {\n      prop: /^[a-zA-Z\\$\\_][a-zA-Z\\d\\$\\_]*/,\n    },\n    next: [\n      'splitter',\n      'assignment',\n      'expEdge',\n      'dot',\n      'inlineIf',\n      'expEnd'\n    ]\n  },\n  value: {\n    types: {\n      createObject: /^\\{/,\n      createArray: /^\\[/,\n      number: /^(0x[\\da-f]+(_[\\da-f]+)*|(\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?|\\.\\d+(_\\d+)*))(e[\\+\\-]?\\d+(_\\d+)*)?(n)?(?!\\d)/i,\n      string: /^\"(\\d+)\"/,\n      literal: /^`(\\d+)`/,\n      regex: /^\\/(\\d+)\\/r(?![\\w\\$])/,\n      boolean: /^(true|false)(?![\\w\\$])/,\n      null: /^null(?![\\w\\$])/,\n      und: /^undefined(?![\\w\\$])/,\n      arrowFunctionSingle: /^(async\\s+)?([a-zA-Z\\$_][a-zA-Z\\d\\$_]*)\\s*=>\\s*({)?/,\n      arrowFunction: /^(async\\s*)?\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*)*)?\\s*\\)\\s*=>\\s*({)?/,\n      inlineFunction: /^(async\\s+)?function(\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*)?\\s*\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*)*)?\\s*\\)\\s*{/,\n      group: /^\\(/,\n      NaN: /^NaN(?![\\w\\$])/,\n      Infinity: /^Infinity(?![\\w\\$])/,\n      void: /^void(?![\\w\\$])\\s*/,\n      await: /^await(?![\\w\\$])\\s*/,\n      new: /^new(?![\\w\\$])\\s*/,\n      throw: /^throw(?![\\w\\$])\\s*/\n    },\n    next: [\n      'splitter',\n      'expEdge',\n      'dot',\n      'inlineIf',\n      'expEnd'\n    ]\n  },\n  initialize: {\n    types: {\n      initialize: /^(var|let|const)\\s+([a-zA-Z\\$_][a-zA-Z\\d\\$_]*)\\s*(=)?/,\n      return: /^return(?![\\w\\$])/,\n    },\n    next: [\n      'modifier',\n      'value', \n      'prop', \n      'incrementerBefore',\n      'expEnd'\n    ]\n  },\n  spreadObject: {\n    types: {\n      spreadObject: /^\\.\\.\\./\n    },\n    next: [\n      'value',\n      'prop', \n    ]\n  },\n  spreadArray: {\n    types: {\n      spreadArray: /^\\.\\.\\./\n    },\n    next: [\n      'value', \n      'prop', \n    ]\n  },\n  expEnd: {types: {}, next: []},\n  expFunction: {\n    types: {\n      function: /^(async\\s+)?function(\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*)\\s*\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z\\$_][a-zA-Z\\d\\$_]*)*)?\\s*\\)\\s*{/,\n    },\n    next: [\n      'expEdge',\n      'expEnd'\n    ]\n  },\n  expSingle: {\n    types: {\n      for: /^(([a-zA-Z\\$\\_][\\w\\$]*)\\s*:)?\\s*for\\s*\\(/,\n      do: /^(([a-zA-Z\\$\\_][\\w\\$]*)\\s*:)?\\s*do(?![\\w\\$])\\s*(\\{)?/,\n      while: /^(([a-zA-Z\\$\\_][\\w\\$]*)\\s*:)?\\s*while\\s*\\(/,\n      loopAction: /^(break|continue)(?![\\w\\$])\\s*([a-zA-Z\\$\\_][\\w\\$]*)?/,\n      if: /^((([a-zA-Z\\$\\_][\\w\\$]*)\\s*:)?\\s*)if\\s*\\(/,\n      try: /^try\\s*{/,\n      block: /^{/,\n      switch: /^(([a-zA-Z\\$\\_][\\w\\$]*)\\s*:)?\\s*switch\\s*\\(/,\n    },\n    next: [\n      'expEnd'\n    ]\n  }\n};\n\nlet closings = {\n  \"(\": \")\",\n  \"[\": \"]\",\n  \"{\": \"}\",\n  \"'\": \"'\",\n  '\"': '\"',\n  \"`\": \"`\"\n}\n\nexport function testMultiple(str: string, tests: RegExp[]) {\n  let found: RegExpExecArray;\n  for (let i = 0; i < tests.length; i++) {\n    const test = tests[i];\n    found = test.exec(str);\n    if (found) break;\n  }\n  return found;\n}\n\nexport class CodeString {\n  \n  start: number;\n  end: number;\n  ref: {str: string};\n  constructor(str: string|CodeString) {\n    this.ref = {str: \"\"};\n    if (str instanceof CodeString) {\n      this.ref = str.ref;\n      this.start = str.start\n      this.end = str.end;\n    } else {\n      this.ref.str = str;\n      this.start = 0;\n      this.end = str.length;\n    }\n  }\n\n  substring(start: number, end?: number): CodeString {\n    if (!this.length) return this;\n    start = this.start + start;\n    if (start < 0) {\n      start = 0;\n    }\n    if (start > this.end) {\n      start = this.end;\n    }\n    end = end === undefined ? this.end : this.start + end;\n    if (end < 0) {\n      end = 0;\n    }\n    if (end > this.end) {\n      end = this.end;\n    }\n    const code = new CodeString(this);\n    code.start = start;\n    code.end = end;\n    return code;\n  }\n\n  get length () {\n    const len = this.end - this.start;\n    return len < 0 ? 0 : len;\n  }\n\n  char(i: number) {\n    if (this.start === this.end) return undefined;\n    return this.ref.str[this.start + i];\n  }\n\n  toString() {\n    return this.ref.str.substring(this.start, this.end);\n  }\n\n  trimStart() {\n    const found = /^\\s+/.exec(this.toString());\n    const code = new CodeString(this);\n    if (found) {\n      code.start += found[0].length;\n    }\n    return code;\n  }\n\n  slice(start: number, end?: number) {\n    if (start < 0) {\n      start = this.end - this.start + start;\n    }\n    if (start < 0) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = this.end - this.start;\n    }\n\n    if (end < 0) {\n      end = this.end - this.start + end;\n    }\n    if (end < 0) {\n      end = 0;\n    }\n    return this.substring(start, end);\n  }\n\n  trim() {\n    const code = this.trimStart();\n    const found = /\\s+$/.exec(code.toString());\n    if (found) {\n      code.end -= found[0].length;\n    }\n    return code;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n}\n\n\nconst emptyString = new CodeString(\"\")\n\nconst okFirstChars = /^[\\+\\-~ !]/;\nconst aChar = /^[\\w\\$]/\nconst aNumber = expectTypes.value.types.number;\nconst wordReg = /^((if|for|else|while|do|function)(?![\\w\\$])|[\\w\\$]+)/;\nconst semiColon = /^;/\nconst insertedSemicolons: WeakMap<{str: string}, Array<number>> = new WeakMap();\nconst quoteCache: WeakMap<{str: string}, Map<number, number>> = new WeakMap();\nexport interface restDetails {oneliner?: boolean, words?: string[], lastWord?: string, lastAnyWord?: string, regRes?: RegExpExecArray}\nexport function restOfExp(constants: IConstants, \n                          part: CodeString, \n                          tests?: RegExp[], \n                          quote?: string, \n                          firstOpening?: string, \n                          closingsTests?: RegExp[], \n                          details: restDetails = {}): CodeString {\n  if (!part.length) {\n    return part;\n  }\n  details.words = details.words || [];\n  let isStart = true;\n  tests = tests || [];\n  const hasSemiTest = tests.includes(semiColon);\n  if (hasSemiTest) {\n    tests = tests.filter((a) => a !== semiColon);\n  }\n  const insertedSemis = insertedSemicolons.get(part.ref) || [];\n  const cache = quoteCache.get(part.ref) || new Map<number, number>();\n  quoteCache.set(part.ref, cache);\n  if (quote && cache.has(part.start - 1)) {\n    return part.substring(0, cache.get(part.start - 1) - part.start);\n  }\n  let escape = false;\n  let done = false;\n  let lastChar = \"\";\n  let isOneLiner = false;\n  let i;\n  let lastInertedSemi = false;\n  for (i = 0; i < part.length && !done; i++) {\n    let char = part.char(i);\n    if (quote === '\"' || quote === \"'\" || quote === \"`\") {\n      if (quote === \"`\" && char === \"$\" && part.char(i+1) === \"{\" && !escape) {\n        let skip = restOfExp(constants, part.substring(i+2), [], \"{\");\n        i += skip.length + 2;\n      } else if (char === quote && !escape) {\n        return part.substring(0, i);\n      }\n      escape = !escape && char === \"\\\\\";\n    } else if (closings[char]) {\n      if (!lastInertedSemi && insertedSemis[i + part.start]) {\n        lastInertedSemi = true\n        if (hasSemiTest) {\n          break;\n        }\n        i--;\n        lastChar = ';';\n        continue;\n      }\n      if (isOneLiner && char === \"{\") {\n        isOneLiner = false;\n      }\n      if (char === firstOpening) {\n        done = true;\n        break;\n      } else {\n        let skip = restOfExp(constants, part.substring(i+1), [], char);\n        cache.set(skip.start - 1, skip.end);\n        i += skip.length + 1;\n        isStart = false;\n        if (closingsTests) {\n          let sub = part.substring(i);\n          let found: RegExpExecArray;\n          if (found = testMultiple(sub.toString(), closingsTests)) {\n            details.regRes = found;\n            done = true;\n          }\n        }\n      }\n    } else if (!quote) {\n      let sub = part.substring(i).toString();\n      let foundWord: RegExpExecArray;\n      let foundNumber: RegExpExecArray;\n      if (closingsTests) {\n        let found: RegExpExecArray;\n        if (found = testMultiple(sub, closingsTests)) {\n          details.regRes = found;\n          i++;\n          done = true;\n          break;\n        }\n      }\n      if (foundNumber = aNumber.exec(sub)) {\n        i += foundNumber[0].length - 1;\n        sub = part.substring(i).toString();\n      } else if (lastChar != char) {\n        let found: [string]|RegExpExecArray;\n        if (char === ';' || (insertedSemis[i + part.start] && !isStart && !lastInertedSemi)) {\n          if (hasSemiTest) {\n            found = [\";\"];\n          } else if (insertedSemis[i + part.start]) {\n            lastInertedSemi = true\n            i--;\n            lastChar = ';';\n            continue;\n          }\n          char = sub = ';';\n        } else {\n          lastInertedSemi = false;\n        }\n        if (!found) {\n          found = testMultiple(sub, tests);\n        }\n        if (found) {\n          done = true;\n        }\n        if (!done && (foundWord = wordReg.exec(sub))) {\n          isOneLiner = true;\n          if (foundWord[0].length > 1) {\n            details.words.push(foundWord[1]);\n            details.lastAnyWord = foundWord[1];\n            if (foundWord[2]) {\n              details.lastWord = foundWord[2];\n            }\n          }\n          if(foundWord[0].length > 2) {\n            i += foundWord[0].length - 2;\n          }\n        }\n      }\n      if (isStart) {\n        if (okFirstChars.test(sub)) {\n          done = false;\n        } else {\n          isStart = false;\n        }\n      }\n      if (done) break;\n    } else if(char === closings[quote]) {\n      return part.substring(0, i);\n    }\n    lastChar = char;\n  }\n  if (quote) {\n    throw new SyntaxError(\"Unclosed '\" + quote + \"'\");\n  }\n  if (details) {\n    details.oneliner = isOneLiner;\n  }\n  return part.substring(0, i);\n}\nrestOfExp.next = [\n  'splitter',\n  'expEnd',\n  'inlineIf'\n];\n\nconst startingExecpted = ['initialize', 'expSingle', 'expFunction', 'value', 'modifier', 'prop', 'incrementerBefore', 'expEnd'];\n\nexport const setLispType = (types: string[], fn: LispCallback) => {\n  types.forEach((type) => {\n    lispTypes.set(type, fn);\n  })\n}\n\nconst closingsCreate: {[type:string]: RegExp} = {\n  'createArray': /^\\]/,\n  'createObject': /^\\}/,\n  'group': /^\\)/,\n  'arrayProp': /^\\]/,\n  'call': /^\\)/\n}\n\nsetLispType(['createArray', 'createObject', 'group', 'arrayProp','call'], (constants, type, part, res, expect, ctx) => {\n  let extract = emptyString;\n  let arg: CodeString[] = [];\n  let end = false;\n  let i = res[0].length;\n  const start = i;\n  while (i < part.length && !end) {\n    extract = restOfExp(constants, part.substring(i), [\n      closingsCreate[type],\n      /^,/\n    ]);\n    i += extract.length;\n    if (extract.length) {\n      arg.push(extract);\n    }\n    if (part.char(i) !== ',') {\n      end = true;\n    } else {\n      i++;\n    }\n  }\n  const next = ['value', 'modifier', 'prop', 'incrementerBefore', 'expEnd'];\n  let l: LispItem;\n\n  let funcFound: RegExpExecArray;\n  switch(type) {\n    case 'group':\n    case 'arrayProp':\n      l = lispifyExpr(constants, part.substring(start, i));\n      break;\n    case 'call':\n    case 'createArray':\n      // @TODO: support 'empty' values\n      l = toLispArray(arg.map((e) => lispify(constants, e, [...next, 'spreadArray'])));\n      break;\n    case 'createObject':\n      l = toLispArray(arg.map((str) => {\n        str = str.trimStart();\n        let value;\n        let key;\n        funcFound = expectTypes.expFunction.types.function.exec('function ' + str);\n        if (funcFound) {\n          key = funcFound[2].trimStart();\n          value = lispify(constants, new CodeString('function ' + str.toString().replace(key, \"\")));\n        } else {\n          let extract = restOfExp(constants, str, [/^:/]);\n          key = lispify(constants, extract, [...next, 'spreadObject']);\n          if (key instanceof Lisp && key.op === 'prop') {\n            key = key.b;\n          }\n          if (extract.length === str.length) return key;\n          value = lispify(constants, str.substring(extract.length + 1));\n        }\n        return new Lisp({\n          op: 'keyVal',\n          a: key,\n          b: value\n        });\n      }));\n      break;\n  }\n  type = type === 'arrayProp' ? (res[1] ? '?prop' : 'prop') : (type === 'call' ? (res[1] ? '?call' : 'call') : type);\n  ctx.lispTree = lispify(constants, part.substring(i + 1), expectTypes[expect].next, new Lisp({\n    op: type, \n    a: ctx.lispTree, \n    b: l,\n  }));\n});\n\nsetLispType(['inverse', 'not', 'negative', 'positive', 'typeof', 'delete'], (constants, type, part, res, expect, ctx) => {\n  let extract = restOfExp(constants, part.substring(res[0].length), [/^[^\\s\\.\\w\\$]/]);\n  ctx.lispTree = lispify(constants, part.substring(extract.length + res[0].length), restOfExp.next, new Lisp({\n    op: ['positive', 'negative'].includes(type) ? '$' + res[0] : res[0],\n    a: ctx.lispTree, \n    b: lispify(constants, extract, expectTypes[expect].next), \n  }));\n});\n\nsetLispType(['incrementerBefore'], (constants, type, part, res, expect, ctx) => {\n  let extract = restOfExp(constants, part.substring(2), [/^[^\\s\\.\\w\\$]/]);\n  ctx.lispTree = lispify(constants, part.substring(extract.length + 2), restOfExp.next, new Lisp({\n    op: res[0] + \"$\", \n    a: lispify(constants, extract, expectTypes[expect].next), \n  }));\n});\n\nsetLispType(['incrementerAfter'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispify(constants, part.substring(res[0].length), expectTypes[expect].next, new Lisp({\n    op: \"$\"  + res[0], \n    a: ctx.lispTree, \n  }));\n});\n\nsetLispType(['assign', 'assignModify', 'boolOp'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = new Lisp({\n    op: res[0], \n    a: ctx.lispTree,\n    b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next)\n  });\n});\n\nsetLispType(['opHigh', 'op', 'comparitor', 'bitwise'], (constants, type, part, res, expect, ctx) => {\n  const next = [\n    expectTypes.inlineIf.types.inlineIf,\n    inlineIfElse\n  ];\n  switch (type) {\n    case 'opHigh':\n      next.push(expectTypes.splitter.types.opHigh);\n    case 'op':\n      next.push(expectTypes.splitter.types.op);\n    case 'comparitor':\n      next.push(expectTypes.splitter.types.comparitor);\n    case 'bitwise':\n      next.push(expectTypes.splitter.types.bitwise);\n      next.push(expectTypes.splitter.types.boolOp);\n  }\n  let extract = restOfExp(constants, part.substring(res[0].length), next);\n  ctx.lispTree = lispify(constants, part.substring(extract.length + res[0].length), restOfExp.next, new Lisp({\n    op: res[0],\n    a: ctx.lispTree, \n    b: lispify(constants, extract, expectTypes[expect].next), \n  }));\n});\n\nsetLispType(['inlineIf'], (constants, type, part, res, expect, ctx) => {\n  let found = false;\n  let extract = part.substring(0, 0);\n  let quoteCount = 1;\n  while(!found && extract.length < part.length) {\n    extract.end = restOfExp(constants, part.substring(extract.length + 1), [\n      expectTypes.inlineIf.types.inlineIf,\n      inlineIfElse\n    ]).end;\n    if (part.char(extract.length) === '?') {\n      quoteCount++\n    } else {\n      quoteCount--\n    }\n    if (!quoteCount) {\n      found = true;\n    }\n  }\n  extract.start = part.start + 1;\n  ctx.lispTree = new Lisp({\n    op: '?',\n    a: ctx.lispTree, \n    b: new Lisp({\n      op: ':',\n      a: lispifyExpr(constants, extract),\n      b: lispifyExpr(constants, part.substring(res[0].length + extract.length + 1))\n    })\n  });\n});\n\n\nfunction extractIfElse(constants: IConstants, part: CodeString) {\n  let count = 0;\n  let found = part.substring(0, 0);\n  let foundElse = emptyString;\n  let foundTrue: CodeString;\n  let first = true;\n  let elseReg: RegExpExecArray;\n  let details: restDetails = {}\n  while((found = restOfExp(constants, part.substring(found.end - part.start), [elseIf, ifElse, semiColon], undefined, undefined , undefined, details)).length || first) {\n    first = false;\n    const f = part.substring(found.end - part.start).toString();\n    \n    if (f.startsWith(\"if\")) {\n      found.end++;\n      count++;\n    } else if (f.startsWith('else')) {\n      foundTrue = part.substring(0, found.end - part.start);\n      found.end++;\n      count--;\n      if (!count) {\n        found.end--;\n      }\n    } else if (elseReg = /^;?\\s*else(?![\\w\\$])/.exec(f)) {\n      foundTrue = part.substring(0, found.end - part.start);\n      found.end += elseReg[0].length - 1;\n      count--;\n      if (!count) {\n        found.end -= elseReg[0].length - 1;\n      }\n    } else {\n      foundTrue = foundElse.length ? foundTrue : part.substring(0, found.end - part.start);\n      break;\n    }\n    if (!count) {\n      let ie = extractIfElse(constants, part.substring(found.end - part.start + (/^;?\\s*else(?![\\w\\$])/.exec(f)?.[0].length)));\n      foundElse = ie.all;\n      break;\n    }\n    details = {};\n  }\n  foundTrue = foundTrue || part.substring(0, found.end - part.start);\n  return {all: part.substring(0, Math.max(foundTrue.end, foundElse.end) - part.start), true: foundTrue, false: foundElse};\n}\n\nsetLispType(['if'], (constants, type, part, res, expect, ctx) => {\n  let condition = restOfExp(constants, part.substring(res[0].length), [], \"(\");\n  const ie = extractIfElse(constants, part.substring(res[1].length));\n  const isBlock = /^\\s*\\{/.exec(part.substring(res[0].length + condition.length + 1).toString());\n  const startTrue = res[0].length - res[1].length + condition.length + 1;\n  \n  let trueBlock = ie.true.substring(startTrue);\n  let elseBlock = ie.false;\n  \n  condition = condition.trim();\n  trueBlock = trueBlock.trim();\n  elseBlock = elseBlock.trim();\n\n  if (trueBlock.char(0) === \"{\") trueBlock = trueBlock.slice(1, -1);\n  if (elseBlock.char(0) === \"{\") elseBlock = elseBlock.slice(1, -1);\n  ctx.lispTree = new Lisp({\n    op: 'if',\n    a: lispifyExpr(constants, condition), \n    b: new If(lispifyBlock(trueBlock, constants), elseBlock.length ? lispifyBlock(elseBlock, constants) : undefined)\n  });\n});\n\nsetLispType(['switch'], (constants, type, part, res, expect, ctx) => {\n  const test = restOfExp(constants, part.substring(res[0].length), [], \"(\");\n  let start = part.toString().indexOf(\"{\", res[0].length + test.length + 1);\n  if (start === -1) throw new SyntaxError(\"Invalid switch\");\n  let statement = insertSemicolons(constants, restOfExp(constants, part.substring(start + 1), [], \"{\"));\n  let caseFound: RegExpExecArray;\n  const caseTest = /^\\s*(case\\s|default)\\s*/;\n  let cases: Lisp[] = [];\n  let defaultFound = false;\n  while(caseFound = caseTest.exec(statement.toString())) {\n    if (caseFound[1] === 'default') {\n      if (defaultFound) throw new SyntaxError(\"Only one default switch case allowed\");\n      defaultFound = true;\n    }\n    let cond = restOfExp(constants, statement.substring(caseFound[0].length), [/^:/]);\n    let found = emptyString;\n    let i = start = caseFound[0].length + cond.length + 1;\n    let bracketFound = /^\\s*\\{/.exec(statement.substring(i).toString());\n    let exprs = [];\n    if (bracketFound) {\n      i += bracketFound[0].length;\n      found = restOfExp(constants, statement.substring(i), [], \"{\");\n      i += found.length + 1;\n      exprs = lispifyBlock(found, constants);\n    } else {\n      let notEmpty = restOfExp(constants, statement.substring(i), [caseTest]);\n      if (!notEmpty.trim().length) {\n        exprs = [];\n        i += notEmpty.length;\n      } else {\n        while((found = restOfExp(constants, statement.substring(i), [semiColon])).length) {\n          i += found.length + (statement.char(i + found.length) === ';' ? 1 : 0);\n          if (caseTest.test(statement.substring(i).toString())) {\n            break;\n          }\n        }\n        exprs = lispifyBlock(statement.substring(start, found.end - statement.start), constants);\n      }\n    }\n    statement = statement.substring(i);\n    cases.push(new Lisp({\n      op: \"case\",\n      a: caseFound[1] === \"default\" ? undefined : lispifyExpr(constants, cond),\n      b: toLispArray(exprs)\n    }));\n  }\n  ctx.lispTree = new Lisp({\n    op: 'switch',\n    a: lispifyExpr(constants, test),\n    b: toLispArray(cases)\n  });\n});\n\nsetLispType(['dot', 'prop'], (constants, type, part, res, expect, ctx) => {\n  let prop = res[0];\n  let index = res[0].length;\n  let op = 'prop';\n  if (type === 'dot') {\n    if (res[1]) {\n      op = '?prop';\n    }\n    let matches = part.substring(res[0].length).toString().match(expectTypes.prop.types.prop);\n    if (matches && matches.length) {\n      prop = matches[0];\n      index = prop.length + res[0].length\n    } else {\n      throw new SyntaxError('Hanging  dot');\n    }\n  }\n  ctx.lispTree = lispify(constants, part.substring(index), expectTypes[expect].next, new Lisp({\n    op: op, \n    a: ctx.lispTree, \n    b: prop\n  }));\n});\n\nsetLispType(['spreadArray', 'spreadObject'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = new Lisp({\n    op: type,\n    b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next)\n  });\n});\n\nsetLispType(['return', 'throw'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = new Lisp({\n    op: type,\n    b: lispifyExpr(constants, part.substring(res[0].length))\n  });\n});\n\nconst primitives = {\n  \"true\": true,\n  \"false\": false,\n  \"null\": null,\n  Infinity,\n  NaN,\n  \"und\": undefined\n}\n\nsetLispType(['number', 'boolean', 'null', 'und', 'NaN', 'Infinity'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispify(constants, part.substring(res[0].length), expectTypes[expect].next, type === \"number\" ? (res[10] ? BigInt(res[1]) : Number(res[0])) : primitives[type === \"boolean\" ? res[0] : type]);\n});\n\nsetLispType(['string', 'literal', 'regex'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispify(constants, part.substring(res[0].length), expectTypes[expect].next, new Lisp({\n    op: type,\n    b: parseInt(JSON.parse(res[1]), 10),\n  }));\n});\n\nsetLispType(['initialize'], (constants, type, part, res, expect, ctx) => {\n  if (!res[3]) {\n    ctx.lispTree = lispify(constants, part.substring(res[0].length), expectTypes[expect].next, new Lisp({\n      op: res[1],\n      a: res[2]\n    }));\n  } else {\n    ctx.lispTree = new Lisp({\n      op: res[1],\n      a: res[2],\n      b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next)\n    });\n  }\n});\n\nsetLispType(['function', 'inlineFunction', 'arrowFunction', 'arrowFunctionSingle'], (constants, type, part, res, expect, ctx) => {\n  const isArrow = type !== 'function' && type !== 'inlineFunction';\n  const isReturn = isArrow && !res[res.length - 1];\n  const argPos = isArrow ? 2 : 3;\n  const isAsync = !!res[1];\n  const args: any[] = res[argPos] ? res[argPos].replace(/\\s+/g, \"\").split(/,/g) : [];\n  if (!isArrow) {\n    args.unshift((res[2] || \"\").trimStart());\n  }\n  let ended = false;\n  args.forEach((arg) => {\n    if (ended) throw new SyntaxError('Rest parameter must be last formal parameter');\n    if (arg.startsWith('...')) ended = true;\n  });\n  args.unshift(isAsync);\n  const f = restOfExp(constants, part.substring(res[0].length), !isReturn ? [/^}/] : [/^[,\\)\\}\\]]/, semiColon])\n  const func = (isReturn ? 'return ' + f : f);\n  ctx.lispTree = lispify(constants, part.substring(res[0].length + func.length + 1), expectTypes[expect].next, new Lisp({\n    op: isArrow ? 'arrowFunc' : type,\n    a: toLispArray(args),\n    b: constants.eager ? lispifyFunction(new CodeString(func), constants) : func\n  }));\n});\n\nconst iteratorRegex = /^((let|var|const)\\s+)?\\s*([a-zA-Z\\$_][a-zA-Z\\d\\$_]*)\\s+(in|of)(?![\\w\\$])/\nsetLispType(['for', 'do', 'while'], (constants, type, part, res, expect, ctx) => {\n  let i = 0;\n  let startStep: LispItem = true;\n  let startInternal: LispArray = toLispArray([]);\n  let getIterator: LispItem;\n  let beforeStep: LispItem = false;\n  let checkFirst = true;\n  let condition: LispItem;\n  let step: LispItem = true;\n  let body: CodeString;\n  switch (type) {\n    case 'while':\n      i = part.toString().indexOf(\"(\") + 1;\n      let extract = restOfExp(constants, part.substring(i), [], \"(\");\n      condition = lispifyExpr(constants, extract);\n      body = restOfExp(constants, part.substring(i + extract.length + 1)).trim();\n      if (body[0] === \"{\") body = body.slice(1, -1);\n      break;\n    case 'for':\n      i = part.toString().indexOf(\"(\") + 1;\n      let args: CodeString[] = [];\n      let extract2 = emptyString;\n      for (let k = 0; k < 3; k++)  {\n        extract2 = restOfExp(constants, part.substring(i), [/^[;\\)]/]);\n        args.push(extract2.trim());\n        i += extract2.length + 1;\n        if (part.char(i - 1) === \")\") break;\n      }\n      let iterator: RegExpExecArray;\n      if (args.length === 1 && (iterator = iteratorRegex.exec(args[0].toString()))) {\n        if (iterator[4] === 'of') {\n          getIterator = lispifyExpr(constants, args[0].substring(iterator[0].length)),\n          startInternal = toLispArray([\n            ofStart2, \n            ofStart3\n          ]);\n          condition = ofCondition;\n          step = ofStep;\n          beforeStep = lispify(constants, new CodeString((iterator[1] || 'let ') + iterator[3]  + ' = $$next.value'), ['initialize']);\n        } else {\n          getIterator = lispifyExpr(constants, args[0].substring(iterator[0].length)),\n          startInternal = toLispArray([\n            inStart2,\n            inStart3\n          ]);\n          step = inStep;\n          condition = inCondition;\n          beforeStep = lispify(constants, new CodeString((iterator[1] || 'let ') + iterator[3] + ' = $$keys[$$keyIndex]'), ['initialize']);\n        }\n      } else if (args.length === 3) {\n        startStep = lispifyExpr(constants, args.shift(), startingExecpted);\n        condition = lispifyExpr(constants, args.shift());\n        step = lispifyExpr(constants, args.shift());\n      } else {\n        throw new SyntaxError(\"Invalid for loop definition\");\n      }\n      body = restOfExp(constants, part.substring(i)).trim();\n      if (body[0] === \"{\") body = body.slice(1, -1);\n\n      break;\n    case 'do':\n      checkFirst = false;\n      const isBlock = !!res[3];\n      body = restOfExp(constants, part.substring(res[0].length), isBlock ? [/^\\}/] : [semiColon]);\n      condition = lispifyExpr(constants, restOfExp(constants, part.substring(part.toString().indexOf(\"(\", res[0].length + body.length) + 1), [], \"(\"));\n      break;\n  }\n  const a = [checkFirst, startInternal, getIterator, startStep, step, condition, beforeStep] as any;\n  a.lisp = true;\n  ctx.lispTree = new Lisp({\n    op: 'loop',\n    a,\n    b: lispifyBlock(body, constants)\n  });\n});\n\nsetLispType(['block'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispifyBlock(restOfExp(constants, part.substring(1), [], \"{\"), constants);\n});\n\nsetLispType(['loopAction'], (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = new Lisp({\n    op: 'loopAction',\n    a: res[1],\n  });\n});\n\nconst catchReg = /^\\s*(catch\\s*(\\(\\s*([a-zA-Z\\$_][a-zA-Z\\d\\$_]*)\\s*\\))?|finally)\\s*\\{/\nsetLispType(['try'], (constants, type, part, res, expect, ctx) => {\n  const body = restOfExp(constants, part.substring(res[0].length), [], \"{\");\n  let catchRes = catchReg.exec(part.substring(res[0].length + body.length + 1).toString());\n  let finallyBody;\n  let exception;\n  let catchBody;\n  let offset = 0;\n  if (catchRes[1].startsWith('catch')) {\n    catchRes = catchReg.exec(part.substring(res[0].length + body.length + 1).toString());\n    exception = catchRes[2];\n    catchBody = restOfExp(constants, part.substring(res[0].length + body.length + 1 + catchRes[0].length), [], \"{\");\n    offset = res[0].length + body.length + 1 + catchRes[0].length + catchBody.length + 1;\n    if ((catchRes = catchReg.exec(part.substring(offset).toString())) && catchRes[1].startsWith('finally')) {\n      finallyBody = restOfExp(constants, part.substring(offset + catchRes[0].length), [], \"{\");\n    }\n  } else {\n    finallyBody = restOfExp(constants, part.substring(res[0].length + body.length + 1 + catchRes[0].length), [], \"{\");\n  }\n  const b = [\n    exception,\n    lispifyBlock(insertSemicolons(constants, catchBody || emptyString), constants),\n    lispifyBlock(insertSemicolons(constants, finallyBody || emptyString), constants),\n  ] as any;\n  b.lisp = true;\n  ctx.lispTree = new Lisp({\n    op: 'try',\n    a: lispifyBlock(insertSemicolons(constants, body), constants),\n    b\n  });\n});\n\nsetLispType(['void', 'await'], (constants, type, part, res, expect, ctx) => {\n  const extract = restOfExp(constants, part.substring(res[0].length), [/^[^\\s\\.\\w\\$]/]);\n  ctx.lispTree = lispify(constants, part.substring(res[0].length + extract.length), expectTypes[expect].next, new Lisp({\n    op: type,\n    a: lispify(constants, extract),\n  }));\n});\n\nsetLispType(['new'], (constants, type, part, res, expect, ctx) => {\n  let i = res[0].length;\n  const obj = restOfExp(constants, part.substring(i), [], undefined, \"(\");\n  i += obj.length + 1;\n  const args = [];\n  if (part.char(i - 1) === \"(\") {\n    const argsString = restOfExp(constants, part.substring(i), [], \"(\");\n    i += argsString.length + 1;\n    let found;\n    let j = 0;\n    while((found = restOfExp(constants, argsString.substring(j), [/^,/])).length) {\n      j += found.length + 1;\n      args.push(found.trim());\n    }\n  }\n  ctx.lispTree = lispify(constants, part.substring(i), expectTypes.expEdge.next, new Lisp({\n    op: type,\n    a: lispify(constants, obj, expectTypes.initialize.next),\n    b: toLispArray(args.map((arg) => lispify(constants, arg, expectTypes.initialize.next))),\n  }));\n});\n\nconst ofStart2 = lispify(undefined, new CodeString('let $$iterator = $$obj[Symbol.iterator]()'), ['initialize']);\nconst ofStart3 = lispify(undefined, new CodeString('let $$next = $$iterator.next()'), ['initialize']);\nconst ofCondition = lispify(undefined, new CodeString('return !$$next.done'), ['initialize']);\nconst ofStep = lispify(undefined, new CodeString('$$next = $$iterator.next()'));\nconst inStart2 = lispify(undefined, new CodeString('let $$keys = Object.keys($$obj)'), ['initialize']);\nconst inStart3 = lispify(undefined, new CodeString('let $$keyIndex = 0'), ['initialize']);\nconst inStep = lispify(undefined, new CodeString('$$keyIndex++'));\nconst inCondition = lispify(undefined, new CodeString('return $$keyIndex < $$keys.length'), ['initialize']);\n\nvar lastType;\nvar lastPart;\nvar lastLastPart;\nvar lastLastLastPart;\nvar lastLastLastLastPart;\nfunction lispify(constants: IConstants, part: CodeString, expected?: string[], lispTree?: LispItem, topLevel = false): LispItem {\n  expected = expected || expectTypes.initialize.next;\n  if (part === undefined) return lispTree;\n\n  part = part.trimStart();\n  const str = part.toString();\n  if (!part.length && !expected.includes('expEnd')) {\n    throw new SyntaxError(\"Unexpected end of expression\");\n  }\n  if (!part.length) return lispTree;\n\n  let ctx = {lispTree: lispTree};\n\n  let res: any;\n  for (let expect of expected) {\n    if (expect === 'expEnd') {\n      continue;\n    }\n    for (let type in expectTypes[expect].types) {\n      if (type === 'expEnd') {\n        continue;\n      }\n      if(res = expectTypes[expect].types[type].exec(str)) {\n        lastType = type;\n        lastLastLastLastPart = lastLastLastPart;\n        lastLastLastPart = lastLastPart;\n        lastLastPart = lastPart;\n        lastPart = part;\n        try {\n          lispTypes.get(type)(constants, type, part, res, expect, ctx);\n        } catch(e) {\n          if (topLevel && e instanceof SyntaxError) {\n            throw new ParseError(e.message, str);\n          }\n          throw e;\n        }\n        break;\n      }\n    }\n    if (res) break;\n  }\n\n  if (!res && part.length) {\n    let msg = `Unexpected token after ${lastType}: ${part.char(0)}`;\n    if (topLevel) {\n      throw new ParseError(`Unexpected token after ${lastType}: ${part.char(0)}`, str);\n    }\n    throw new SyntaxError(`Unexpected token after ${lastType}: ${part.char(0)}`);\n  }\n  return ctx.lispTree;\n}\n\nconst startingExpectedWithoutSingle = startingExecpted.filter((r) => r !== 'expSingle');\n\nfunction lispifyExpr(constants: IConstants, str: CodeString, expected?: string[]): LispItem {\n  if (!str.trimStart().length) return undefined;\n  let subExpressions: CodeString[] = [];\n  let sub: CodeString;\n  let pos = 0;\n  expected = expected || expectTypes.initialize.next;\n  if (expected.includes('expSingle')) {\n    if (testMultiple(str.toString(), Object.values(expectTypes.expSingle.types))) {\n      return lispify(constants, str, ['expSingle'], undefined, true);\n    }\n  }\n  if (expected === startingExecpted) expected = startingExpectedWithoutSingle;\n  while ((sub = restOfExp(constants, str.substring(pos), [/^,/])).length) {\n    subExpressions.push(sub.trimStart());\n    pos += sub.length + 1;\n  }\n  if (subExpressions.length === 1) {\n    return lispify(constants, str, expected, undefined, true);\n  }\n  if (expected.includes('initialize')) {\n    let defined = expectTypes.initialize.types.initialize.exec(subExpressions[0].toString());\n    if (defined) {\n      return toLispArray(subExpressions.map((str, i) => lispify(constants, i ? new CodeString(defined[1] + ' ' + str) : str, ['initialize'], undefined, true)));\n    } else if (expectTypes.initialize.types.return.exec(subExpressions[0].toString())) {\n      return lispify(constants, str, expected, undefined, true);\n    }\n  }\n  const exprs = toLispArray(subExpressions.map((str, i) => lispify(constants, str, expected, undefined, true)));\n  return new Lisp({op: \"multi\", a: exprs});\n}\n\nexport function lispifyBlock(str: CodeString, constants: IConstants, expression = false): LispArray {\n  str = insertSemicolons(constants, str);\n  if (!str.trim().length) return toLispArray([]);\n  let parts: CodeString[] = [];\n  let part: CodeString;\n  let pos = 0;\n  let start = 0;\n  let details: restDetails = {};\n  let skipped = false;\n  let isInserted = false;\n  while ((part = restOfExp(constants, str.substring(pos), [semiColon], undefined, undefined, undefined, details)).length) {\n    isInserted = str.char(pos + part.length) && str.char(pos + part.length) !== ';';\n    pos += part.length + (isInserted ? 0 : 1);\n    if (/^\\s*else(?![\\w\\$])/.test(str.substring(pos).toString())) {\n      skipped = true;\n    } else if (details.words.includes('do') && /^\\s*while(?![\\w\\$])/.test(str.substring(pos).toString())) {\n      skipped = true;\n    } else {\n      skipped = false;\n      parts.push(str.substring(start, pos - (isInserted ? 0 : 1)));\n      start = pos;\n    }\n    details = {};\n    if (expression) break;\n  }\n  if (skipped) {\n    parts.push(str.substring(start, pos - (isInserted ? 0 : 1)));\n  }\n  return toLispArray(parts.map((str) => str.trimStart()).filter((str) => str.length).map((str, j) => {\n    return lispifyExpr(constants, str.trimStart(), startingExecpted);\n  }).flat());\n}\n\nexport function lispifyFunction(str: CodeString, constants: IConstants, expression = false): LispArray {\n  if (!str.trim().length) return toLispArray([]);\n  const tree = lispifyBlock(str, constants, expression);\n  let hoisted: LispArray = toLispArray([]);\n  hoist(tree, hoisted);\n  return toLispArray(hoisted.concat(tree));\n}\n\nfunction hoist(item: LispItem, res: LispArray): boolean {\n  if (Array.isArray(item)) {\n    const rep = [];\n    for (let it of item) {\n      if (!hoist(it, res)) {\n        rep.push(it);\n      }\n    }\n    if (rep.length !== item.length) {\n      item.length = 0;\n      item.push(...rep);\n    }\n  } else if (item instanceof Lisp) {\n    if (item.op === \"try\" || item.op === \"if\" || item.op === \"loop\" || item.op === \"switch\") {\n      hoist(item.a, res);\n      hoist(item.b, res);\n    } else if (item.op === \"var\") {\n      res.push(new Lisp({op: 'var', a: item.a}));\n    } else if (item.op === \"function\" && item.a[1]) {\n      res.push(item);\n      return true;\n    }\n  }\n  return false;\n}\n\nconst closingsNoInsertion = /^(\\})\\s*(catch|finally|else|while|instanceof)(?![\\w\\$])/\n                    //  \\w|)|] \\n \\w = 2                                  // \\} \\w|\\{ = 5 \nconst colonsRegex = /^((([\\w\\$\\]\\)\\\"\\'\\`]|\\+\\+|\\-\\-)\\s*\\r?\\n\\s*([\\w\\$\\+\\-\\!~]))|(\\}\\s*[\\w\\$\\!~\\+\\-\\{\\(\\\"\\'\\`]))/\n\n// if () \\w \\n; \\w              == \\w \\n \\w    | last === if             a\n// if () { }; \\w                == \\} ^else    | last === if             b\n// if () \\w \\n; else \\n \\w \\n;  == \\w \\n \\w    | last === else           a\n// if () {} else {}; \\w         == \\} \\w       | last === else           b\n// while () \\n \\w \\n; \\w        == \\w \\n \\w    | last === while          a\n// while () { }; \\w             == \\} \\w       | last === while          b\n// do \\w \\n; while (); \\w       == \\w \\n while | last === do             a\n// do { } while (); \\w          == \\) \\w       | last === while          c\n// try {} catch () {}; \\w       == \\} \\w       | last === catch|finally  b\n// \\w \\n; \\w                    == \\w \\n \\w    | last === none           a\n// cb() \\n \\w                   == \\) \\n \\w    | last === none           a\n// obj[a] \\n \\w                 == \\] \\n \\w    | last === none           a\n// {} {}                        == \\} \\{       | last === none           b\n\nexport function insertSemicolons(constants: IConstants, str: CodeString): CodeString {\n  let rest = str;\n  let sub = emptyString;\n  let details: restDetails = {};\n  const inserted = insertedSemicolons.get(str.ref) || new Array(str.ref.str.length);\n  while ((sub = restOfExp(constants, rest, [], undefined, undefined, [colonsRegex], details)).length) {\n    let valid = false;\n    let part = sub;\n    let edge = sub.length;\n    if (details.regRes) {\n      valid = true;\n      const [,, a,,, b] = details.regRes;\n      edge = details.regRes[3] === \"++\" || details.regRes[3] === \"--\" ? sub.length + 1 : sub.length;\n      part = rest.substring(0,  edge);\n      if (b) {\n        let res = closingsNoInsertion.exec(rest.substring(sub.length - 1).toString());\n        if (res) {\n          if (res[2] === 'while') {\n            valid = details.lastWord !== 'do';\n          } else {\n            valid = false;\n          }\n        } else if (details.lastWord === 'function' && details.regRes[5][0] === \"}\" && details.regRes[5].slice(-1) === '(') {\n          valid = false;\n        } \n\n      } else if (a) {\n        if (details.lastWord === 'if' || details.lastWord === 'while' || details.lastWord === 'for' || details.lastWord === 'else') {\n          valid = false;\n        }\n      }\n    }\n    if (valid) {\n      inserted[part.end] = true;\n    }\n    rest = rest.substring(edge);\n    details = {};\n  }\n  insertedSemicolons.set(str.ref, inserted);\n  return str;\n}\n\nexport function checkRegex(str: string): IRegEx | null {\n  let i = 1;\n  let escape = false;\n  let done = false;\n  let cancel = false;\n  while (i < str.length && !done && !cancel) {\n    done = (str[i] === '/' && !escape);\n    escape = str[i] === '\\\\' && !escape;\n    cancel = str[i] === '\\n';\n    i++;\n  }\n  let after = str.substring(i);\n  cancel = (cancel || !done) || /^\\s*\\d/.test(after);\n  if (cancel) return null;\n  let flags = /^[a-z]*/.exec(after);\n  if(/^\\s+[\\w\\$]/.test(str.substring(i + flags[0].length))) {\n    return null;\n  }\n  return {\n    regex: str.substring(1, i-1),\n    flags: (flags && flags[0]) || \"\",\n    length: i + ((flags && flags[0].length) || 0)\n  }\n}\n\nconst notDivide = /(typeof|delete|instanceof|return|in|of|throw|new|void|do|if)$/\nconst possibleDivide = /^([\\w\\$\\]\\)]|\\+\\+|\\-\\-)[\\s\\/]/;\nexport function extractConstants(constants: IConstants, str: string, currentEnclosure = \"\"): {str: string, length: number} {\n  let quote;\n  let extract: (string|number)[] = [];\n  let escape = false;\n  let regexFound: IRegEx;\n  let comment = \"\";\n  let commentStart = -1;\n  let currJs: LispArray = toLispArray([]);\n  let char: string = \"\";\n  const strRes: (string|number)[] = [];\n  const enclosures: string[] = [];\n  let isPossibleDivide: RegExpExecArray;\n  for (var i = 0; i < str.length; i++) {\n    char = str[i];\n    if (comment) {\n      if (char === comment) {\n        if (comment === \"*\" && str[i + 1] ===\"/\") {\n          comment = \"\";\n          i++\n        } else if (comment === \"\\n\") {\n          comment = \"\";\n        }\n      }\n    } else {\n      if (escape) {\n        escape = false;\n        extract.push(char);\n        continue;\n      }\n\n      if (quote) {\n        if (quote === \"`\" && char === \"$\" && str[i+1] === \"{\") {\n          let skip = extractConstants(constants, str.substring(i+2), \"{\");\n          currJs.push(skip.str);\n          extract.push('${', currJs.length - 1, `}`);\n          i += skip.length + 2;\n        } else if (quote === char) {\n          if (quote === '`') {\n            constants.literals.push({\n              op: 'literal',\n              a:  unraw(extract.join(\"\")),\n              b: currJs\n            });\n            strRes.push(`\\``, constants.literals.length - 1, `\\``);\n          } else {\n            constants.strings.push(unraw(extract.join(\"\")));\n            strRes.push(`\"`, constants.strings.length - 1, `\"`);\n          }\n          quote = null;\n          extract = [];\n        } else {\n          extract.push(char);\n        }\n      } else {\n        if ((char === \"'\"  || char === '\"'  || char === '`')) {\n          currJs = toLispArray([]);\n          quote = char;\n        } else if (closings[currentEnclosure] === char && !enclosures.length) {\n          return {str: strRes.join(\"\"), length: i}\n        } else if (closings[char]) {\n          enclosures.push(char);\n          strRes.push(char);\n        } else if (closings[enclosures[enclosures.length-1]] === char) {\n          enclosures.pop();\n          strRes.push(char);\n        } else if (char === \"/\" && (str[i+1] === \"*\" || str[i+1] === \"/\")) {\n          comment = str[i+1] === \"*\" ? \"*\" : \"\\n\";\n          commentStart = i;\n        } else if (char === '/' && !isPossibleDivide && (regexFound = checkRegex(str.substring(i)))) {\n          constants.regexes.push(regexFound);\n          strRes.push(`/`, constants.regexes.length - 1, `/r`);\n          i += regexFound.length - 1;\n        } else {\n          strRes.push(char);\n        }\n\n        if (!isPossibleDivide || !space.test(char)) {\n          if (isPossibleDivide = possibleDivide.exec(str.substring(i))) {\n            if (notDivide.test(str.substring(0, i + isPossibleDivide[1].length))) {\n              isPossibleDivide = null;\n            }\n          }\n        }\n      }\n      escape = quote && char === \"\\\\\";\n    }\n  }\n\n  if (comment) {\n    if (comment === \"*\") {\n      throw new SyntaxError(`Unclosed comment '/*': ${str.substring(commentStart)}`)\n    }\n  }\n  return {str: strRes.join(\"\"), length: i}\n}\nexport function parse(code: string, eager = false, expression = false): IExecutionTree {\n  if (typeof code !== 'string') throw new ParseError(`Cannot parse ${code}`, code);\n  let str = ' ' + code;\n  const constants: IConstants = {strings: [], literals: [], regexes: [], eager};\n  str = extractConstants(constants, str).str;\n\n  for (let l of constants.literals) {\n    l.b = toLispArray(l.b.map((js: string) => lispifyExpr(constants, new CodeString(js))));\n  }\n  return {tree: lispifyFunction(new CodeString(str), constants, expression), constants};\n}\n","import { SpreadArray, LispItem, KeyVal, SpreadObject, If, Lisp, LispArray, toLispArray, parse, IRegEx, lispifyFunction, CodeString } from \"./parser.js\";\nimport { IExecContext, IContext, Ticks } from \"./Sandbox.js\";\n\n\nexport type SandboxFunction = (code: string, ...args: any[]) => () => any;\nexport type sandboxedEval = (code: string) => any;\nexport type sandboxSetTimeout = (handler: TimerHandler, timeout?: any, ...args: any[]) => any;\nexport type sandboxSetInterval = (handler: TimerHandler, timeout?: any, ...args: any[]) => any;\nexport type Done = (err?: any, res?: any) => void\nexport class ExecReturn {\n  constructor(public auditReport: IAuditReport, public result: any, public returned: boolean, public breakLoop = false, public continueLoop = false) {}\n}\n\nexport interface IAuditReport {\n  globalsAccess: Set<any>;\n  prototypeAccess: {[name: string]: Set<string>}\n}\n\nexport interface IGlobals {\n  [key: string]: any\n}\n\nexport interface IChange {\n  type: string;\n}\n\nexport interface ICreate extends IChange {\n  type: \"create\";\n  prop: number|string;\n}\n\nexport interface IReplace extends IChange {\n  type: \"replace\";\n}\n\nexport interface IDelete extends IChange {\n  type: \"delete\";\n  prop: number|string;\n}\n\nexport interface IReverse extends IChange {\n  type: \"reverse\";\n}\n\nexport interface ISort extends IChange {\n  type: \"sort\";\n}\n\nexport interface IPush extends IChange {\n  type: \"push\";\n  added: unknown[];\n}\n\nexport interface IPop extends IChange {\n  type: \"pop\";\n  removed: unknown[];\n}\n\nexport interface IShift extends IChange {\n  type: \"shift\";\n  removed: unknown[];\n}\n\nexport interface IUnShift extends IChange {\n  type: \"unshift\";\n  added: unknown[];\n}\n\nexport interface ISplice extends IChange {\n  type: \"splice\";\n  startIndex: number;\n  deleteCount: number; \n  added: unknown[];\n  removed: unknown[];\n\n}\n\nexport interface ICopyWithin extends IChange {\n  type: \"copyWithin\";\n  startIndex: number;\n  endIndex: number;\n  added: unknown[];\n  removed: unknown[];\n}\n\nexport type Change = ICreate | IReplace | IDelete | IReverse | ISort | IPush | IPop | IUnShift | IShift | ISplice | ICopyWithin\n\nexport type replacementCallback = (obj: any, isStaticAccess: boolean) => any\n\nexport class Prop {\n  constructor(public context: {[key:string]: any}, public prop: string, public isConst = false, public isGlobal = false, public isVariable = false) {\n  }\n}\n\nconst optional = Symbol('optional');\n\nconst reservedWords = new Set([\n  'instanceof',\n  'typeof',\n  'return',\n  'try',\n  'catch',\n  'if',\n  'finally',\n  'else',\n  'in',\n  'of',\n  'var',\n  'let',\n  'const',\n  'for',\n  'delete',\n  'false',\n  'true',\n  'while',\n  'do',\n  'break',\n  'continue',\n  'new',\n  'function',\n  'async',\n  'await',\n  'switch',\n  'case'\n]);\n\nenum VarType {\n  let = \"let\",\n  const = \"const\",\n  var = \"var\"\n}\n\nfunction keysOnly(obj: any): {[key: string]: true} {\n  const ret = Object.assign({}, obj);\n  for (let key in ret) {\n    ret[key] = true;\n  }\n  return ret;\n}\n\nexport class Scope {\n  parent: Scope;\n  const: {[key: string]: true} = {};\n  let: {[key: string]: true} = {};\n  var: {[key: string]: true} = {};\n  globals: {[key: string]: true};\n  allVars: {[key:string]: any} & Object;\n  functionThis?: any;\n  constructor(parent: Scope, vars = {}, functionThis?: any) {\n    const isFuncScope = functionThis !== undefined || parent === null;\n    this.parent = parent;\n    this.allVars = vars;\n    this.let = isFuncScope ? this.let : keysOnly(vars);\n    this.var = isFuncScope ? keysOnly(vars) : this.var;\n    this.globals = parent === null ? keysOnly(vars) : {};\n    this.functionThis = functionThis;\n  }\n\n  get(key: string, functionScope = false): any {\n    if (key === 'this' && this.functionThis !== undefined) {\n      return new Prop({this: this.functionThis}, key, true, false, true);\n    }\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (this.parent === null || !functionScope || this.functionThis !== undefined) {\n      if (this.globals.hasOwnProperty(key)) {\n        return new Prop(this.functionThis, key, false, true, true);\n      }\n      if (key in this.allVars && (!(key in {}) || this.allVars.hasOwnProperty(key))) {\n        return new Prop(this.allVars, key, this.const.hasOwnProperty(key), this.globals.hasOwnProperty(key), true);\n      }\n      if (this.parent === null) {\n        return new Prop(undefined, key);\n      }\n    }\n    return this.parent.get(key, functionScope)\n  }\n\n  set(key: string, val: any) {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be assigned')\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    let prop = this.get(key);\n    if(prop.context === undefined) {\n      throw new ReferenceError(`Variable '${key}' was not declared.`);\n    }\n    if (prop.isConst) {\n      throw new TypeError(`Cannot assign to const variable '${key}'`);\n    }\n    if (prop.isGlobal) {\n      throw new SandboxError(`Cannot override global variable '${key}'`);\n    }\n    prop.context[prop] = val;\n    return prop;\n  }\n\n  declare(key: string, type: VarType = null, value: any = undefined, isGlobal = false) {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be declared');\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (type === 'var' && this.functionThis === undefined && this.parent !== null) {\n      return this.parent.declare(key, type, value, isGlobal)\n    } else if ((this[type].hasOwnProperty(key) && type !== 'const' && !this.globals.hasOwnProperty(key)) || !(key in this.allVars)) {\n      if (isGlobal) {\n        this.globals[key] = true;\n      }\n      this[type][key] = true;\n      this.allVars[key] = value;\n    } else {\n      throw new SandboxError(`Identifier '${key}' has already been declared`);\n    }\n    return new Prop(this.allVars, key, this.const.hasOwnProperty(key), isGlobal);\n  }\n}\n\nexport interface IScope {\n  [key: string]: any;\n}\n\nexport class FunctionScope implements IScope {}\n\nexport class LocalScope implements IScope {}\n\nexport class SandboxError extends Error {}\n\nlet currentTicks: Ticks;\n\nexport function sandboxFunction(context: IContext, ticks?: Ticks): SandboxFunction {\n  return SandboxFunction;\n  function SandboxFunction(...params: any[]) {\n    let code = params.pop() || \"\";\n    let parsed = parse(code);\n    return createFunction(params, parsed.tree, ticks || currentTicks, {\n      ctx: context,\n      constants: parsed.constants,\n      tree: parsed.tree\n    }, undefined, 'anonymous');\n  }\n}\n\nfunction generateArgs(argNames: string[], args: unknown[]) {\n  const vars: any = {};\n  argNames.forEach((arg, i) => {\n    if (arg.startsWith('...')) {\n      vars[arg.substring(3)] = args.slice(i);\n    } else {\n      vars[arg] = args[i];\n    }\n  });\n  return vars;\n}\n\nconst sandboxedFunctions = new WeakSet();\nexport function createFunction(argNames: string[], parsed: LispItem, ticks: Ticks, context: IExecContext, scope?: Scope, name?: string) {\n  if (context.ctx.options.forbidFunctionCreation) {\n    throw new SandboxError(\"Function creation is forbidden\");\n  }\n  let func;\n  if (name === undefined) {\n    func = (...args) => {\n      const vars = generateArgs(argNames, args);\n      const res = executeTree(ticks, context, parsed, scope === undefined ? [] : [new Scope(scope, vars)])\n      return res.result;\n    }\n  } else {\n    func = function sandboxedObject(...args) {\n      const vars = generateArgs(argNames, args);\n      const res = executeTree(ticks, context, parsed, scope === undefined ? [] : [new Scope(scope, vars, this)])\n      return res.result;\n    }\n  }\n  sandboxedFunctions.add(func);\n  return func;\n}\n\nexport function createFunctionAsync(argNames: string[], parsed: LispItem, ticks: Ticks, context: IExecContext, scope?: Scope, name?: string) {\n  if (context.ctx.options.forbidFunctionCreation) {\n    throw new SandboxError(\"Function creation is forbidden\");\n  }\n  if (!context.ctx.options.prototypeWhitelist?.has(Promise)) {\n    throw new SandboxError(\"Async/await not permitted\");\n  }\n  let func;\n  if (name === undefined) {\n    func = async (...args) => {\n      const vars = generateArgs(argNames, args);\n      const res = await executeTreeAsync(ticks, context, parsed, scope === undefined ? [] : [new Scope(scope, vars)])\n      return res.result;\n    }\n  } else {\n    func = async function sandboxedObject(...args) {\n      const vars = generateArgs(argNames, args);\n      const res = await executeTreeAsync(ticks, context, parsed, scope === undefined ? [] : [new Scope(scope, vars, this)])\n      return res.result;\n    }\n  }\n  sandboxedFunctions.add(func);\n  return func;\n}\n\nexport function sandboxedEval(func: SandboxFunction): sandboxedEval {\n  return sandboxEval;\n  function sandboxEval(code: string) {\n    return func(code)();\n  }\n}\n\nexport function sandboxedSetTimeout(func: SandboxFunction): sandboxSetTimeout {\n  return function sandboxSetTimeout(handler, ...args) {\n    if (typeof handler !== 'string') return setTimeout(handler, ...args);\n    return setTimeout(func(handler), ...args);\n  }\n}\n\nexport function sandboxedSetInterval(func: SandboxFunction): sandboxSetInterval {\n  return function sandboxSetInterval(handler, ...args) {\n    if (typeof handler !== 'string') return setInterval(handler, ...args);\n    return setInterval(func(handler), ...args);\n  }\n}\n\nexport function assignCheck(obj: Prop, context: IExecContext, op = 'assign') {\n  if(obj.context === undefined) {\n    throw new ReferenceError(`Cannot ${op} value to undefined.`)\n  }\n  if(typeof obj.context !== 'object' && typeof obj.context !== 'function') {\n    throw new SyntaxError(`Cannot ${op} value to a primitive.`)\n  }\n  if (obj.isConst) {\n    throw new TypeError(`Cannot set value to const variable '${obj.prop}'`);\n  }\n  if (obj.isGlobal) {\n    throw new SandboxError(`Cannot ${op} property '${obj.prop}' of a global object`);\n  }\n  if (typeof obj.context[obj.prop] === 'function' && !obj.context.hasOwnProperty(obj.prop)) {\n    throw new SandboxError(`Override prototype property '${obj.prop}' not allowed`);\n  }\n  if (op === \"delete\") {\n    if (obj.context.hasOwnProperty(obj.prop)) {\n      context.ctx.changeSubscriptions.get(obj.context)?.forEach((cb) => cb({type: \"delete\", prop: obj.prop}));\n    }\n  } else if (obj.context.hasOwnProperty(obj.prop)) {\n    context.ctx.setSubscriptions.get(obj.context)?.get(obj.prop)?.forEach((cb) => cb({\n      type: \"replace\"\n    }));\n  } else {\n    context.ctx.changeSubscriptions.get(obj.context)?.forEach((cb) => cb({type: \"create\", prop: obj.prop}));\n  }\n}\nconst arrayChange = new Set([\n  [].push,\n  [].pop,\n  [].shift,\n  [].unshift,\n  [].splice,\n  [].reverse,\n  [].sort,\n  [].copyWithin\n]);\nconst literalRegex = /(\\$\\$)*(\\$)?\\${(\\d+)}/g;\ntype OpCallback = (exec: Execution, done: Done, ticks: Ticks, a: LispItem|string[], b: LispItem|Lisp[], obj: Prop|any|undefined, context: IExecContext, scope: Scope, bobj?: Prop|any|undefined, inLoopOrSwitch?: string) => void;\nlet ops2: {[op:string]: OpCallback} = {\n  'prop': (exec, done, ticks, a: LispItem|any, b: string, obj, context, scope) => {\n    if(a === null) {\n      throw new TypeError(`Cannot get property ${b} of null`);\n    }\n    const type = typeof a;\n    if (type === 'undefined' && obj === undefined) {\n      let prop = scope.get(b);\n      if (prop.context === undefined) throw new ReferenceError(`${b} is not defined`);\n      if (prop.context === context.ctx.sandboxGlobal) {\n        if (context.ctx.options.audit) {\n          context.ctx.auditReport.globalsAccess.add(b);\n        }\n        const rep = context.ctx.globalsWhitelist.has(context.ctx.sandboxGlobal[b]) ? context.ctx.evals.get(context.ctx.sandboxGlobal[b]) : undefined;\n        if (rep) {\n          done(undefined, rep);\n          return;\n        }\n      }\n      if (prop.context && prop.context[b] === globalThis) {\n        done(undefined, context.ctx.globalScope.get('this'));\n        return;\n      }\n\n      context.ctx.getSubscriptions.forEach((cb) => cb(prop.context, prop.prop));\n      done(undefined, prop);\n      return;\n    } else if (a === undefined) {\n      throw new SandboxError(\"Cannot get property '\" + b + \"' of undefined\")\n    }\n\n    if (type !== 'object') {\n      if(type === 'number') {\n        a = new Number(a);\n      } else if(type === 'string') {\n        a = new String(a);\n      } else if(type === 'boolean') {\n        a = new Boolean(a);\n      }\n    } else if (typeof a.hasOwnProperty === 'undefined') {\n      done(undefined, new Prop(undefined, b));\n      return;\n    }\n\n    const isFunction = type === 'function';\n    let prototypeAccess = isFunction || !(a.hasOwnProperty(b) || typeof b === 'number');\n\n    if (context.ctx.options.audit && prototypeAccess) {\n      if (typeof b === 'string') {\n        let prot = a.constructor.prototype;\n        do {\n          if (prot.hasOwnProperty(b)) {\n            if(!context.ctx.auditReport.prototypeAccess[prot.constructor.name]) {\n              context.ctx.auditReport.prototypeAccess[prot.constructor.name] = new Set();\n            }\n            context.ctx.auditReport.prototypeAccess[prot.constructor.name].add(b);\n          }\n        } while(prot = Object.getPrototypeOf(prot))\n      }\n    }\n\n    if (prototypeAccess) {\n      if (isFunction) {\n        if (!['name', 'length', 'constructor'].includes(b) && a.hasOwnProperty(b)) {\n          const whitelist = context.ctx.options.prototypeWhitelist.get(a);\n          const replace = context.ctx.options.prototypeReplacements.get(a);\n          if (replace) {\n            done(undefined, new Prop(replace(a, true), b));\n            return;\n          }\n          if (whitelist && (!whitelist.size || whitelist.has(b))) {\n          } else {\n            throw new SandboxError(`Static method or property access not permitted: ${a.name}.${b}`);\n          }\n        }\n      } else if (b !== 'constructor') {\n        let prot = a.constructor.prototype;\n        do {\n          if (prot.hasOwnProperty(b)) {\n            const whitelist = context.ctx.options.prototypeWhitelist.get(prot.constructor);\n            const replace = context.ctx.options.prototypeReplacements.get(prot.constuctor);\n            if (replace) {\n              done(undefined, new Prop(replace(a, false), b));\n              return;\n            }\n            if (whitelist && (!whitelist.size || whitelist.has(b))) {\n              break;\n            }\n            throw new SandboxError(`Method or property access not permitted: ${prot.constructor.name}.${b}`);\n          }\n        } while(prot = Object.getPrototypeOf(prot));\n      }\n    }\n\n    if (context.ctx.evals.has(a[b])) {\n      done(undefined, context.ctx.evals.get(a[b]));\n      return;\n    }\n    if (a[b] === globalThis) {\n      done(undefined, context.ctx.globalScope.get('this'));\n      return;\n    }\n\n    let g = obj.isGlobal || (isFunction && !sandboxedFunctions.has(a)) || context.ctx.globalsWhitelist.has(a);\n\n    if (!g) {\n      context.ctx.getSubscriptions.forEach((cb) => cb(a, b));\n    }\n    done(undefined, new Prop(a, b, false, g));\n  },\n  'call': (exec, done, ticks, a, b: LispArray, obj, context, scope) => {\n    if (context.ctx.options.forbidFunctionCalls) throw new SandboxError(\"Method calls are not allowed\");\n    if (typeof a !== 'function') {\n      throw new TypeError(`${obj.prop} is not a function`);\n    }\n    const args = b.map((item) => {\n      if (item instanceof SpreadArray) {\n        return [...item.item];\n      } else {\n        return [item];\n      }\n    }).flat();\n    execMany(ticks, exec, toLispArray(args), (err, vals) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      if (typeof obj === 'function') {\n        done(undefined, obj(...vals));\n        return;\n      }\n      if (obj.context[obj.prop] === JSON.stringify && context.ctx.getSubscriptions.size) {\n        const cache = new Set<any>();\n        const recurse = (x: any) => {\n          if (!x || !(typeof x === 'object') || cache.has(x)) return;\n          cache.add(x);\n          for (let y in x) {\n            context.ctx.getSubscriptions.forEach((cb) => cb(x, y));\n            recurse(x[y]);\n          }\n        };\n        recurse(vals[0]);\n      }\n  \n      if (obj.context instanceof Array && arrayChange.has(obj.context[obj.prop]) && context.ctx.changeSubscriptions.get(obj.context)) {\n        let change: Change;\n        let changed = false;\n        if (obj.prop === \"push\") {\n          change = {\n            type: \"push\",\n            added: vals\n          }\n          changed = !!vals.length;\n        } else if (obj.prop === \"pop\") {\n          change = {\n            type: \"pop\",\n            removed: obj.context.slice(-1)\n          }\n          changed = !!change.removed.length;\n        }  else if (obj.prop === \"shift\") {\n          change = {\n            type: \"shift\",\n            removed: obj.context.slice(0, 1)\n          }\n          changed = !!change.removed.length;\n        } else if (obj.prop === \"unshift\") {\n          change = {\n            type: \"unshift\",\n            added: vals\n          }\n          changed = !!vals.length;\n        } else if (obj.prop === \"splice\") {\n          change = {\n            type: \"splice\",\n            startIndex: vals[0],\n            deleteCount: vals[1] === undefined ? obj.context.length : vals[1],\n            added: vals.slice(2),\n            removed: obj.context.slice(vals[0], vals[1] === undefined ? undefined : vals[0] + vals[1])\n          }\n          changed = !!change.added.length || !!change.removed.length;\n        } else if (obj.prop === \"reverse\" || obj.prop === \"sort\") {\n          change = {type: obj.prop}\n          changed = !!obj.context.length;\n        } else if (obj.prop === \"copyWithin\") {\n          let len = vals[2] === undefined ? obj.context.length - vals[1] : Math.min(obj.context.length, vals[2] - vals[1]);\n          change = {\n            type: \"copyWithin\",\n            startIndex: vals[0],\n            endIndex: vals[0] + len,\n            added: obj.context.slice(vals[1], vals[1] + len),\n            removed: obj.context.slice(vals[0], vals[0] + len)\n          }\n          changed = !!change.added.length || !!change.removed.length;\n        }\n        if (changed) {\n          context.ctx.changeSubscriptions.get(obj.context)?.forEach((cb) => cb(change));\n        }\n      }\n      done(undefined, obj.context[obj.prop](...vals));\n    }, scope, context);\n  },\n  'createObject': (exec, done, ticks, a, b: LispArray, obj, context, scope) => {\n    let res = {} as any;\n    for (let item of b as (KeyVal|SpreadObject)[]) {\n      if (item instanceof SpreadObject) {\n        res = {...res, ...item.item};\n      } else {\n        res[item.key] = item.val;\n      }\n    }\n    done(undefined, res);\n  },\n  'keyVal': (exec, done, ticks, a: string, b: LispItem) => done(undefined, new KeyVal(a, b)),\n  'createArray': (exec, done, ticks, a, b: LispArray, obj, context, scope) => {\n    const items = b.map((item) => {\n      if (item instanceof SpreadArray) {\n        return [...item.item];\n      } else {\n        return [item];\n      }\n    }).flat()\n    execMany(ticks, exec, toLispArray(items), done, scope, context);\n  },\n  'group': (exec, done, ticks, a, b) => done(undefined, b),\n  'string': (exec, done, ticks, a, b: string, obj, context) => done(undefined, context.constants.strings[b]),\n  'regex': (exec, done, ticks, a, b: string, obj, context) => {\n    const reg: IRegEx = context.constants.regexes[b];\n    if (!context.ctx.globalsWhitelist.has(RegExp)) {\n      throw new SandboxError(\"Regex not permitted\");\n    } else {\n      done(undefined, new RegExp(reg.regex, reg.flags));\n    }\n  },\n  'literal': (exec, done, ticks, a, b: number, obj, context, scope) => {\n    let name: string = context.constants.literals[b].a;\n    let found = toLispArray([]);\n    let f;\n    let resnums = [];\n    while(f = literalRegex.exec(name)) {\n      if (!f[2]) {\n        found.push(context.constants.literals[b].b[parseInt(f[3], 10)]);\n        resnums.push(f[3]);\n      }\n    }\n\n    execMany(ticks, exec, found, (err, processed) => {\n      const reses = {};\n      if(err) {\n        done(err);\n        return;\n      }\n      for (let i in resnums) {\n        const num = resnums[i];\n        reses[num] = processed[i];\n      }\n      done(undefined, name.replace(/(\\\\\\\\)*(\\\\)?\\${(\\d+)}/g, (match, $$, $, num) => {\n        if ($) return match;\n        let res = reses[num]\n        res =  res instanceof Prop ? res.context[res.prop] : res;\n        return ($$ ? $$ : '') + `${res}`;\n      }));\n    }, scope, context)\n  },\n  'spreadArray': (exec, done, ticks, a, b: LispItem, obj, context, scope) => {\n    exec(ticks, b, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      done(undefined, new SpreadArray(res));\n    });\n  },\n  'spreadObject': (exec, done, ticks, a, b: LispItem, obj, context, scope) => {\n    exec(ticks, b, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      done(undefined, new SpreadObject(res));\n    });\n  },\n  '!': (exec, done, ticks, a, b) => done(undefined, !b),\n  '~': (exec, done, ticks, a, b) => done(undefined, ~b),\n  '++$': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, ++obj.context[obj.prop]);\n  },\n  '$++': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop]++);\n  },\n  '--$': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, --obj.context[obj.prop]);\n  },\n  '$--': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop]--);\n  },\n  '=': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    obj.context[obj.prop] = b;\n    done(undefined, new Prop(obj.context, obj.prop, false, obj.isGlobal));\n  },\n  '+=': (exec, done, ticks, a, b, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] += b);\n  },\n  '-=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] -= b);\n  },\n  '/=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] /= b);\n  },\n  '*=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] *= b);\n  },\n  '**=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] **= b);\n  },\n  '%=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] %= b);\n  },\n  '^=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] ^= b);\n  },\n  '&=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] &= b);\n  },\n  '|=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] |= b);\n  },\n  '<<=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] <<= b);\n  },\n  '>>=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] >>= b);\n  },\n  '>>>=': (exec, done, ticks, a, b: number, obj, context) => {\n    assignCheck(obj, context);\n    done(undefined, obj.context[obj.prop] >>= b);\n  },\n  '?': (exec, done, ticks, a, b) => {\n    if (!(b instanceof If)) {\n      throw new SyntaxError('Invalid inline if')\n    }\n    done(undefined, a ? (b as any).t : (b as any).f);\n  },\n  '>': (exec, done, ticks, a, b) => done(undefined, a > b),\n  '<': (exec, done, ticks, a, b) => done(undefined, a < b),\n  '>=': (exec, done, ticks, a, b) => done(undefined, a >= b),\n  '<=': (exec, done, ticks, a, b) => done(undefined, a <= b),\n  '==': (exec, done, ticks, a, b) => done(undefined, a == b),\n  '===': (exec, done, ticks, a, b) => done(undefined, a === b),\n  '!=': (exec, done, ticks, a, b) => done(undefined, a != b),\n  '!==': (exec, done, ticks, a, b) => done(undefined, a !== b),\n  '&&': (exec, done, ticks, a, b) => done(undefined, a && b),\n  '||': (exec, done, ticks, a, b) => done(undefined, a || b),\n  '&': (exec, done, ticks, a: number, b: number) => done(undefined, a & b),\n  '|': (exec, done, ticks, a: number, b: number) => done(undefined, a | b),\n  ':': (exec, done, ticks, a, b) => done(undefined, new If(a, b)),\n  '+': (exec, done, ticks, a: number, b: number) => done(undefined, a + b),\n  '-': (exec, done, ticks, a: number, b: number) => done(undefined, a - b),\n  '$+': (exec, done, ticks, a, b) => done(undefined, +b),\n  '$-': (exec, done, ticks, a, b) => done(undefined, -b),\n  '/': (exec, done, ticks, a: number, b: number) => done(undefined, a / b),\n  '^': (exec, done, ticks, a: number, b: number) => done(undefined, a ^ b),\n  '*': (exec, done, ticks, a: number, b: number) => done(undefined, a * b),\n  '%': (exec, done, ticks, a: number, b: number) => done(undefined, a % b),\n  '<<': (exec, done, ticks, a: number, b: number) => done(undefined, a << b),\n  '>>': (exec, done, ticks, a: number, b: number) => done(undefined, a >> b),\n  '>>>': (exec, done, ticks, a: number, b: number) => done(undefined, a >>> b),\n  'typeof': (exec, done, ticks, a, b) => done(undefined, typeof b),\n  'instanceof': (exec, done, ticks, a, b:  { new(): any }) => done(undefined, a instanceof b),\n  'in': (exec, done, ticks, a: string, b) => done(undefined, a in b),\n  'delete': (exec, done, ticks, a, b, obj, context, scope, bobj: Prop) => {\n    if (bobj.context === undefined) {\n      done(undefined, true);\n      return;\n    }\n    assignCheck(bobj, context, 'delete');\n    if (bobj.isVariable) {\n      done(undefined, false);\n      return;\n    }\n    done(undefined, delete bobj.context[bobj.prop]);\n  },\n  'return': (exec, done, ticks, a, b, obj, context) => done(undefined, b),\n  'var': (exec, done, ticks, a: string, b: LispItem, obj, context, scope, bobj) => {\n    exec(ticks, b, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      done(undefined, scope.declare(a, VarType.var, res));\n    });\n  },\n  'let': (exec, done, ticks, a: string, b: LispItem, obj, context, scope, bobj) => {\n    exec(ticks, b, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      done(undefined, scope.declare(a, VarType.let, res, bobj && bobj.isGlobal));\n    });\n  },\n  'const': (exec, done, ticks, a: string, b: LispItem, obj, context, scope, bobj) => {\n    exec(ticks, b, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      done(undefined, scope.declare(a, VarType.const, res));\n    });\n  },\n  'arrowFunc': (exec, done, ticks, a: string[], b: LispItem, obj: Lisp, context, scope) => {\n    a = [...a];\n    if (typeof obj.b === \"string\" || obj.b instanceof CodeString) {\n      obj.b = b = lispifyFunction(new CodeString(obj.b), context.constants);\n    }\n    if (a.shift()) {\n      done(undefined, createFunctionAsync(a, b, ticks, context, scope));\n    } else {\n      done(undefined, createFunction(a, b, ticks, context, scope));\n    }\n  },\n  'function': (exec, done, ticks, a: string[]&LispArray, b: LispItem, obj: Lisp, context, scope) => {\n    if (typeof obj.b === \"string\" || obj.b instanceof CodeString) {\n      obj.b = b = lispifyFunction(new CodeString(obj.b), context.constants);\n    }\n    let isAsync = a.shift();\n    let name = a.shift();\n    let func;\n    if (isAsync) {\n      func = createFunctionAsync(a, b, ticks, context, scope, name);\n    } else {\n      func = createFunction(a, b, ticks, context, scope, name);\n    }\n    if (name) {\n      scope.declare(name, VarType.var, func);\n    }\n    done(undefined, func);\n  },\n  'inlineFunction': (exec, done, ticks, a: string[]&LispArray, b: LispItem, obj: Lisp, context, scope) => {\n    if (typeof obj.b === \"string\" || obj.b instanceof CodeString) {\n      obj.b = b = lispifyFunction(new CodeString(obj.b), context.constants);\n    }\n    let isAsync = a.shift();\n    let name = a.shift();\n    if (name) {\n      scope = new Scope(scope, {})\n    }\n    let func;\n    if (isAsync) {\n      func = createFunctionAsync(a, b, ticks, context, scope, name);\n    } else {\n      func = createFunction(a, b, ticks, context, scope, name);\n    }\n    if (name) {\n      scope.declare(name, VarType.let, func);\n    }\n    done(undefined, func);\n  },\n  'loop': (exec, done, ticks, a: LispArray, b: LispItem, obj, context, scope) => {\n    const [checkFirst, startInternal, getIterator, startStep, step, condition, beforeStep] = a;\n    let loop = true;\n    const loopScope = new Scope(scope, {});\n    let internalVars = {\n      '$$obj': undefined\n    };\n    const interalScope = new Scope(loopScope, internalVars);\n    if (exec === execAsync) {\n      (async() => {\n        await asyncDone((d) => exec(ticks, startStep, loopScope, context, d));\n        internalVars['$$obj'] = (await asyncDone((d) => exec(ticks, getIterator, loopScope, context, d))).result;\n        await asyncDone((d) => exec(ticks, startInternal, interalScope, context, d));\n        if (checkFirst) loop = (await asyncDone((d) => exec(ticks, condition, interalScope, context, d))).result;\n        while (loop) {\n          let innerLoopVars = {};\n          await asyncDone((d) => exec(ticks, beforeStep, new Scope(interalScope, innerLoopVars), context, d));\n          let res = await executeTreeAsync(ticks, context, b, [new Scope(loopScope, innerLoopVars)], \"loop\");\n          if (res instanceof ExecReturn && res.returned) {\n            done(undefined, res);\n            return;\n          }\n          if (res instanceof ExecReturn && res.breakLoop) {\n            break;\n          }\n          await asyncDone((d) => exec(ticks, step, interalScope, context, d));\n          loop = (await asyncDone((d) => exec(ticks, condition, interalScope, context, d))).result;\n        }\n        done();\n      })().catch(done);\n    } else {\n      syncDone((d) => exec(ticks, startStep, loopScope, context, d));\n      internalVars['$$obj'] = syncDone((d) => exec(ticks, getIterator, loopScope, context, d)).result;\n      syncDone((d) => exec(ticks, startInternal, interalScope, context, d));\n      if (checkFirst) loop = (syncDone((d) => exec(ticks, condition, interalScope, context, d))).result;\n      while (loop) {\n        let innerLoopVars = {};\n        syncDone((d) => exec(ticks, beforeStep, new Scope(interalScope, innerLoopVars), context, d));\n        let res = executeTree(ticks, context, b, [new Scope(loopScope, innerLoopVars)], \"loop\");\n        if (res instanceof ExecReturn && res.returned) {\n          done(undefined, res);\n          return;\n        }\n        if (res instanceof ExecReturn && res.breakLoop) {\n          break;\n        }\n        syncDone((d) => exec(ticks, step, interalScope, context, d));\n        loop = (syncDone((d) => exec(ticks, condition, interalScope, context, d))).result;\n      }\n      done();\n    }\n  },\n  'loopAction': (exec, done, ticks, a: LispItem, b: LispItem, obj, context, scope, bobj, inLoopOrSwitch) => {\n    if ((inLoopOrSwitch === \"switch\" && a === \"continue\") || !inLoopOrSwitch) {\n      throw new SandboxError(\"Illegal \" + a + \" statement\");\n    }\n    done(undefined, new ExecReturn(context.ctx.auditReport, undefined, false, a === \"break\", a === \"continue\"));\n  },\n  'if': (exec, done, ticks, a: LispItem, b: If, obj, context, scope, bobj, inLoopOrSwitch) => {\n    if (!(b instanceof If)) {\n      throw new SyntaxError('Invalid if')\n    }\n    exec(ticks, a, scope, context, (err, res) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      executeTreeWithDone(exec, done, ticks, context, res ? b.t : b.f, [new Scope(scope)], inLoopOrSwitch);\n    });\n  },\n  'switch': (exec, done, ticks, a: LispItem, b: Lisp[], obj, context, scope) => {\n    exec(ticks, a, scope, context, (err, toTest) => {\n      if (err) {\n        done(err);\n        return;\n      }\n      if (exec === execSync) {\n        let res: ExecReturn;\n        let isTrue = false;\n        for (let caseItem of b) {\n          if (isTrue || (isTrue = !caseItem.a || toTest === valueOrProp((syncDone((d) => exec(ticks, caseItem.a, scope, context, d))).result))) {\n            if (!caseItem.b) continue;\n            res = executeTree(ticks, context, caseItem.b, [scope], \"switch\");\n            if (res.breakLoop) break;\n            if (res.returned) {\n              done(undefined, res);\n              return;\n            }\n            if (!caseItem.a) { // default case\n              break;\n            }\n          }\n        }\n        done();\n      } else {\n        (async () => {\n          let res: ExecReturn;\n          let isTrue = false;\n          for (let caseItem of b) {\n            if (isTrue || (isTrue = !caseItem.a || toTest === valueOrProp((await asyncDone((d) => exec(ticks, caseItem.a, scope, context, d))).result))) {\n              if (!caseItem.b) continue;\n              res = await executeTreeAsync(ticks, context, caseItem.b, [scope], \"switch\");\n              if (res.breakLoop) break;\n              if (res.returned) {\n                done(undefined, res);\n                return;\n              }\n              if (!caseItem.a) { // default case\n                break;\n              }\n            }\n          }\n          done();\n        })().catch(done)\n      }\n    });\n  },\n  'try': (exec, done, ticks, a: LispItem, b: [string, LispItem, LispItem]&LispArray, obj, context, scope, bobj, inLoopOrSwitch) => {\n    const [exception, catchBody, finallyBody] = b;\n    executeTreeWithDone(exec, (err, res) => {\n      executeTreeWithDone(exec, (e) => {\n        if (e) done(e);\n        else  if (err) {\n          let sc = {};\n          if (exception) sc[exception] = err;\n          executeTreeWithDone(exec, done, ticks, context, catchBody, [new Scope(scope)], inLoopOrSwitch);\n        } else {\n          done(undefined, res);\n        }\n      }, ticks, context, finallyBody, [new Scope(scope, {})]);\n    }, ticks, context, a, [new Scope(scope)], inLoopOrSwitch);\n  },\n  'void': (exec, done, ticks, a) => {done()},\n  'new': (exec, done, ticks, a: new (...args: any[]) => any, b: any, obj, context) => {\n    if (!context.ctx.globalsWhitelist.has(a) && !sandboxedFunctions.has(a)) {\n      throw new SandboxError(`Object construction not allowed: ${a.constructor.name}`)\n    }\n    done(undefined, new a(...b))\n  },\n  'throw': (exec, done, ticks, a) => { done(a) },\n  'multi': (exec, done, ticks, a: any[]) => done(undefined, a.pop())\n}\n\nexport let ops = new Map<string, OpCallback>();\nfor (let op in ops2) {\n  ops.set(op, ops2[op]);\n}\n\nfunction valueOrProp(a: any) {\n  if (a instanceof Prop) return a.context[a.prop];\n  return a;\n}\n\nexport function execMany(ticks: Ticks, exec: Execution, tree: LispArray, done: Done, scope: Scope, context: IExecContext, inLoopOrSwitch?: string) {\n  if (exec === execSync) {\n    _execManySync(ticks, tree, done, scope, context, inLoopOrSwitch);\n  } else {\n    _execManyAsync(ticks, tree, done, scope, context, inLoopOrSwitch).catch(done);\n  }\n}\n\nfunction _execManySync(ticks: Ticks, tree: LispArray, done: Done, scope: Scope, context: IExecContext, inLoopOrSwitch?: string) {\n  let ret = [];\n  for (let i = 0; i < tree.length; i++) {\n    let res;\n    try {\n      res = syncDone((d) => execSync(ticks, tree[i], scope, context, d, inLoopOrSwitch)).result;\n    } catch(e) {\n      done(e);\n      return;\n    }\n    if (res instanceof ExecReturn && (res.returned || res.breakLoop || res.continueLoop)) {\n      done(undefined, res);\n      return;\n    }\n    ret.push(res);\n  }\n  done(undefined, ret);\n}\n\nasync function _execManyAsync(ticks: Ticks, tree: LispArray, done: Done, scope: Scope, context: IExecContext, inLoopOrSwitch?: string) {\n  let ret = [];\n  for (let i = 0; i < tree.length; i++) {\n    let res;\n    try {\n      res = (await asyncDone((d) => execAsync(ticks, tree[i], scope, context, d, inLoopOrSwitch))).result;\n    } catch(e) {\n      done(e);\n      return;\n    }\n    if (res instanceof ExecReturn && (res.returned || res.breakLoop || res.continueLoop)) {\n      done(undefined, res);\n      return;\n    }\n    ret.push(res);\n  }\n  done(undefined, ret);\n}\n\ntype Execution = (ticks: Ticks, tree: LispItem, scope: Scope, context: IExecContext, done: Done, inLoopOrSwitch?: string) => void\n\nexport function asyncDone(callback: (done: Done) => void): Promise<{result: any}> {\n  return new Promise((resolve, reject) => {\n    callback((err, result) => {\n      if (err) reject(err);\n      else resolve({result});\n    });\n  });\n}\n\nexport function syncDone(callback: (done: Done) => void): {result: any} {\n  let result;\n  let err;\n  callback((e, r) => {\n    err = e;\n    result = r;\n  });\n  if (err) throw err;\n  return {result};\n}\n\nexport function execAsync(ticks: Ticks, tree: LispItem, scope: Scope, context: IExecContext, done: Done, inLoopOrSwitch?: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    execWithDone(ticks, tree, scope, context, (e, r) => {\n      done(e, r);\n      resolve();\n    }, true, inLoopOrSwitch);\n  });\n}\n\n\nexport function execSync(ticks: Ticks, tree: LispItem, scope: Scope, context: IExecContext, done: Done, inLoopOrSwitch?: string): void {\n  execWithDone(ticks, tree, scope, context, done, false, inLoopOrSwitch);\n}\n\nfunction execWithDone(ticks: Ticks, tree: LispItem, scope: Scope, context: IExecContext, done: Done, isAsync: boolean, inLoopOrSwitch?: string): void {\n  const exec = isAsync ? execAsync : execSync;\n\n  if (context.ctx.options.executionQuota <= ticks.ticks) {\n    if (typeof context.ctx.options.onExecutionQuotaReached === 'function' && context.ctx.options.onExecutionQuotaReached(ticks, scope, context, tree)) {\n      \n    } else {\n      throw new SandboxError(\"Execution quota exceeded\");\n    }\n  }\n  ticks.ticks++;\n  currentTicks = ticks;\n\n  if (tree instanceof Prop) {\n    done(undefined, tree.context[tree.prop]);\n  } else if (Array.isArray(tree) && tree.lisp) {\n    execMany(ticks, exec, tree, done, scope, context, inLoopOrSwitch);\n  } else if (!(tree instanceof Lisp)) {\n    done(undefined, tree);\n  } else if (['arrowFunc', 'function', 'inlineFunction', 'loop', 'try', 'switch', 'if'].includes(tree.op)) {\n    try {\n      ops.get(tree.op)(exec, done, ticks, tree.a, tree.b, tree, context, scope, undefined, inLoopOrSwitch);\n    } catch (err) {\n      done(err);\n    }\n  } else if (tree.op === 'await') {\n    if (!isAsync) {\n      done(new SandboxError(\"Illegal use of 'await', must be inside async function\"));\n    } else if (context.ctx.options.prototypeWhitelist?.has(Promise)) {\n      execAsync(ticks, tree.a, scope, context, async (e, r) => {\n        if (e) done(e);\n        else try {\n          done(undefined, await r);\n        } catch(err) {\n          done(err);\n        }\n      }, inLoopOrSwitch).catch(done);\n    } else {\n      done(new SandboxError('Async/await is not permitted'))\n    }\n  } else {\n    execWithDone(ticks, tree.a, scope, context, (e, obj) => {\n      if (e) {\n        done(e);\n        return;\n      }\n      let a = obj instanceof Prop ? (obj.context ? obj.context[obj.prop] : undefined) : obj;\n      let op = tree.op;\n      if (op === '?prop' || op === '?call') {\n        if (a === undefined || a === null) {\n          done(undefined, optional);\n          return;\n        }\n        op = op.slice(1);\n      }\n      if (a === optional) {\n        if (op === 'prop' || op === 'call') {\n          done(undefined, a);\n          return;\n        } else {\n          a = undefined;\n        }\n      }\n      execWithDone(ticks, tree.b, scope, context, (e, bobj) => {\n        if (e) {\n          done(e);\n          return;\n        }\n        let b = bobj instanceof Prop ? (bobj.context ? bobj.context[bobj.prop] : undefined) : bobj;\n        if (b === optional) {\n          b = undefined;\n        }\n        if (ops.has(op)) {\n          try {\n            ops.get(op)(exec, done, ticks, a, b, obj, context, scope, bobj, inLoopOrSwitch);\n          } catch (err) {\n            done(err);\n          }\n        } else {\n          done(new SyntaxError('Unknown operator: ' + op));\n        }\n      }, isAsync, inLoopOrSwitch);\n    }, isAsync, inLoopOrSwitch);\n  }\n}\n\nexport function executeTree(ticks: Ticks, context: IExecContext, executionTree: LispItem, scopes: (IScope)[] = [], inLoopOrSwitch?: string): ExecReturn {\n  return syncDone((done) => executeTreeWithDone(execSync, done, ticks, context, executionTree, scopes, inLoopOrSwitch)).result;\n}\n\nexport async function executeTreeAsync(ticks: Ticks, context: IExecContext, executionTree: LispItem, scopes: (IScope)[] = [], inLoopOrSwitch?: string): Promise<ExecReturn> {\n  return (await asyncDone((done) => executeTreeWithDone(execAsync, done, ticks, context, executionTree, scopes, inLoopOrSwitch))).result;\n}\n\nfunction executeTreeWithDone(exec: Execution, done: Done, ticks: Ticks, context: IExecContext, executionTree: LispItem, scopes: (IScope)[] = [], inLoopOrSwitch?: string) {\n  if (!executionTree)  {\n    done();\n    return;\n  }\n  if (!(executionTree instanceof Array)) {\n    throw new SyntaxError('Bad execution tree');\n  }\n  let scope = context.ctx.globalScope;\n  let s;\n  while (s = scopes.shift()) {\n    if (typeof s !== \"object\") continue;\n    if (s instanceof Scope) {\n      scope = s;\n    } else {\n      scope = new Scope(scope, s, s instanceof LocalScope ? undefined : null);\n    }\n  }\n  if (context.ctx.options.audit && !context.ctx.auditReport) {\n    context.ctx.auditReport = {\n      globalsAccess: new Set(),\n      prototypeAccess: {},\n    }\n  }\n  if (exec === execSync) {\n    _executeWithDoneSync(done, ticks, context, executionTree, scope, inLoopOrSwitch);\n  } else {\n    _executeWithDoneAsync(done, ticks, context, executionTree, scope, inLoopOrSwitch).catch(done);\n  }\n}\n\nfunction _executeWithDoneSync(done: Done, ticks: Ticks, context: IExecContext, executionTree: LispItem, scope: Scope, inLoopOrSwitch?: string) {\n  if (!(executionTree instanceof Array)) throw new SyntaxError('Bad execution tree');\n  let i = 0;\n  for (i = 0; i < executionTree.length; i++) {\n    let res;\n    let err;\n    const current = executionTree[i];\n    try {\n      execSync(ticks, current, scope, context, (e, r) => {\n        err = e;\n        res = r;\n      }, inLoopOrSwitch);\n    } catch (e) {\n      err = e;\n    }\n    if (err) {\n      done(err);\n      return;\n    }\n    if (res instanceof ExecReturn) {\n      done(undefined, res);\n      return;\n    }\n    if (current instanceof Lisp && current.op === 'return') {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true))\n      return;\n    }\n  }\n  done(undefined, new ExecReturn(context.ctx.auditReport, undefined, false));\n}\n\nasync function _executeWithDoneAsync(done: Done, ticks: Ticks, context: IExecContext, executionTree: LispItem, scope: Scope, inLoopOrSwitch?: string) {\n  if (!(executionTree instanceof Array)) throw new SyntaxError('Bad execution tree');\n  let i = 0;\n  for (i = 0; i < executionTree.length; i++) {\n    let res;\n    let err;\n    const current = executionTree[i];\n    try {\n      await execAsync(ticks, current, scope, context, (e, r) => {\n        err = e;\n        res = r;\n      }, inLoopOrSwitch);\n    } catch (e) {\n      err = e;\n    }\n    if (err) {\n      done(err);\n      return;\n    }\n    if (res instanceof ExecReturn) {\n      done(undefined, res);\n      return;\n    }\n    if (current instanceof Lisp && current.op === 'return') {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true))\n      return;\n    }\n  }\n  done(undefined, new ExecReturn(context.ctx.auditReport, undefined, false));\n}\n","import { \n  IGlobals, \n  replacementCallback, \n  IAuditReport,  \n  Change, \n  sandboxFunction,\n  sandboxedEval,\n  sandboxedSetTimeout,\n  sandboxedSetInterval,\n  ExecReturn,\n  executeTree,\n  executeTreeAsync,\n  ops,\n  assignCheck,\n  execMany,\n  execAsync,\n  execSync,\n  asyncDone,\n  Scope,\n  IScope,\n  FunctionScope,\n  LocalScope,\n  syncDone,\n  SandboxFunction\n} from \"./executor.js\";\nimport { parse, IExecutionTree, expectTypes, setLispType, LispItem } from \"./parser.js\";\n\n\nexport {\n  expectTypes,\n  setLispType,\n  ops as executionOps,\n  assignCheck,\n  execMany,\n  execAsync,\n  execSync,\n  asyncDone,\n  syncDone,\n  executeTree,\n  executeTreeAsync,\n  FunctionScope,\n  LocalScope,\n};\n\nexport interface IOptions {\n  audit?: boolean;\n  forbidFunctionCalls?: boolean;\n  forbidFunctionCreation?: boolean;\n  prototypeReplacements?: Map<new () => any, replacementCallback>;\n  prototypeWhitelist?: Map<any, Set<string>>;\n  globals: IGlobals;\n  executionQuota?: bigint;\n  onExecutionQuotaReached?: (ticks: Ticks, scope: Scope, context: IExecutionTree, tree: LispItem) => boolean|void;\n}\n\nexport interface IContext {\n  sandbox: Sandbox;\n  globalScope: Scope;\n  sandboxGlobal: SandboxGlobal;\n  globalsWhitelist?: Set<any>;\n  options: IOptions;\n  evals: Map<any, any>;\n  getSubscriptions: Set<(obj: object, name: string) => void>;\n  setSubscriptions: WeakMap<object, Map<string, Set<(modification: Change) => void>>>;\n  changeSubscriptions: WeakMap<object, Set<(modification: Change) => void>>;\n  auditReport?: IAuditReport;\n}\n\nexport interface Ticks {\n  ticks: bigint;\n}\n\nexport interface IExecContext extends IExecutionTree {\n  ctx: IContext\n}\n\nexport class SandboxGlobal {\n  constructor(globals: IGlobals) {\n    if (globals === globalThis) return globalThis;\n    for (let i in globals) {\n      (this as any)[i] = globals[i];\n    }\n  }\n}\n\nexport default class Sandbox {\n  context: IContext;\n  Function: SandboxFunction;\n  constructor(options?: IOptions) {\n    options = Object.assign({\n      audit: false,\n      forbidFunctionCalls: false,\n      forbidFunctionCreation: false,\n      globals: Sandbox.SAFE_GLOBALS,\n      prototypeWhitelist: Sandbox.SAFE_PROTOTYPES, \n      prototypeReplacements: new Map<new() => any, replacementCallback>(),\n    }, options || {});\n    const sandboxGlobal = new SandboxGlobal(options.globals);\n    this.context = {\n      sandbox: this,\n      globalsWhitelist: new Set(Object.values(options.globals)),\n      options,\n      globalScope: new Scope(null, options.globals, sandboxGlobal),\n      sandboxGlobal,\n      evals: new Map(),\n      getSubscriptions: new Set<(obj: object, name: string) => void>(),\n      setSubscriptions: new WeakMap<object, Map<string, Set<() => void>>>(),\n      changeSubscriptions: new WeakMap()\n    };\n    const func = sandboxFunction(this.context);\n    this.context.evals.set(Function, func);\n    this.context.evals.set(eval, sandboxedEval(func));\n    this.context.evals.set(setTimeout, sandboxedSetTimeout(func));\n    this.context.evals.set(setInterval, sandboxedSetInterval(func));\n    this.Function = sandboxFunction(this.context, {ticks: BigInt(0)});\n  }\n\n  static get SAFE_GLOBALS(): IGlobals {\n    return {\n      Function,\n      console: {\n        debug: console.debug, \n        error: console.error, \n        info: console.info, \n        log: console.log, \n        table: console.table, \n        warn: console.warn\n      },\n      isFinite,\n      isNaN,\n      parseFloat,\n      parseInt,\n      decodeURI,\n      decodeURIComponent,\n      encodeURI,\n      encodeURIComponent,\n      escape,\n      unescape,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Object,\n      Array,\n      Symbol,\n      Error,\n      EvalError,\n      RangeError,\n      ReferenceError,\n      SyntaxError,\n      TypeError,\n      URIError,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Intl,\n      JSON,\n      Math,\n      Date,\n      RegExp\n    }\n  }\n\n  \n  static get SAFE_PROTOTYPES(): Map<any, Set<string>> {\n    let protos = [\n      SandboxGlobal,\n      Function,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Date,\n      Error,\n      Array,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Symbol,\n      Date,\n      RegExp\n    ]\n    let map = new Map<any, Set<string>>();\n    protos.forEach((proto) => {\n      map.set(proto, new Set());\n    });\n    map.set(Object, new Set([\n      'entries',\n      'fromEntries',\n      'getOwnPropertyNames',\n      'is',\n      'keys',\n      'hasOwnProperty',\n      'isPrototypeOf',\n      'propertyIsEnumerable',\n      'toLocaleString',\n      'toString',\n      'valueOf',\n      'values'\n    ]));\n    return map;\n  }\n  \n  subscribeGet(callback: (obj: object, name: string) => void): {unsubscribe: () => void} {\n    this.context.getSubscriptions.add(callback);\n    return {unsubscribe: () => this.context.getSubscriptions.delete(callback)}\n  }\n\n  subscribeSet(obj: object, name: string, callback: (modification: Change) => void): {unsubscribe: () => void} {\n    const names = this.context.setSubscriptions.get(obj) || new Map<string, Set<(modification: Change) => void>>();\n    this.context.setSubscriptions.set(obj, names);\n    const callbacks = names.get(name) || new Set();\n    names.set(name, callbacks);\n    callbacks.add(callback);\n    let changeCbs: Set<(modification: Change) => void>;\n    if (obj && obj[name] && typeof obj[name] === \"object\") {\n      changeCbs = this.context.changeSubscriptions.get(obj[name]) || new Set();\n      changeCbs.add(callback);\n      this.context.changeSubscriptions.set(obj[name], changeCbs);\n    }\n    return {\n      unsubscribe: () => {\n        callbacks.delete(callback);\n        if (changeCbs) changeCbs.delete(callback);\n      }\n    }\n  }\n\n  static audit(code: string, scopes: (IScope)[] = []): ExecReturn {\n    const globals = {};\n    for (let i of Object.getOwnPropertyNames(globalThis)) {\n      globals[i] = globalThis[i];\n    }\n    return new Sandbox({\n      globals,\n      audit: true,\n    }).executeTree(parse(code), scopes);\n  }\n\n  static parse(code: string) {\n    return parse(code);\n  }\n\n  executeTree(executionTree: IExecutionTree, scopes: (IScope)[] = []): ExecReturn {\n    return executeTree({\n      ticks: BigInt(0),\n    }, {\n      ctx: this.context,\n      constants: executionTree.constants,\n      tree: executionTree.tree\n    }, executionTree.tree, scopes);\n  }\n\n  executeTreeAsync(executionTree: IExecutionTree, scopes: (IScope)[] = []): Promise<ExecReturn> {\n    return executeTreeAsync({\n      ticks: BigInt(0),\n    }, {\n      ctx: this.context,\n      constants: executionTree.constants,\n      tree: executionTree.tree\n    }, executionTree.tree, scopes);\n  }\n  \n  compile(code: string, optimize = false): (...scopes: (IScope)[]) => any {\n    const executionTree = parse(code, optimize);\n    return (...scopes: (IScope)[]) => {\n      return this.executeTree(executionTree, scopes).result;\n    };\n  };\n  \n  compileAsync(code: string, optimize = false): (...scopes: (IScope)[]) => Promise<any> {\n    const executionTree = parse(code, optimize);\n    return async (...scopes: (IScope)[]) => {\n      return (await this.executeTreeAsync(executionTree, scopes)).result;\n    };\n  };\n\n  compileExpression(code: string, optimize = false): (...scopes: (IScope)[]) => any {\n    const executionTree = parse(code, optimize, true);\n    return (...scopes: (IScope)[]) => {\n      return this.executeTree(executionTree, scopes).result;\n    };\n  }\n\n  compileExpressionAsync(code: string, optimize = false): (...scopes: (IScope)[]) => Promise<any> {\n    const executionTree = parse(code, optimize, true);\n    return async (...scopes: (IScope)[]) => {\n      return (await this.executeTreeAsync(executionTree, scopes)).result;\n    };\n  }\n}\n"],"names":["parseHexToInt","hex","match","parseInt","NaN","validateAndParseHex","errorName","enforcedLength","parsedHex","Number","isNaN","undefined","length","SyntaxError","parseHexadecimalCode","code","parsedCode","String","fromCharCode","parseUnicodeCode","surrogateCode","parsedSurrogateCode","isCurlyBraced","text","charAt","parseUnicodeCodePointCode","codePoint","slice","fromCodePoint","err","RangeError","singleCharacterEscapes","Map","parseSingleCharacterCode","get","escapeMatch","unraw","raw","replace","_","backslash","unicodeWithSurrogate","surrogate","unicode","octal","singleCharacter","lispTypes","ParseError","Error","[object Object]","message","super","substring","this","Lisp","obj","op","a","b","If","t","f","KeyVal","key","val","SpreadObject","item","SpreadArray","toLispArray","arr","lisp","inlineIfElse","elseIf","ifElse","space","expectTypes","splitter","types","opHigh","comparitor","boolOp","bitwise","next","inlineIf","assignment","assignModify","assign","incrementerBefore","expEdge","call","incrementerAfter","modifier","not","inverse","negative","positive","typeof","delete","dot","arrayProp","prop","value","createObject","createArray","number","string","literal","regex","boolean","null","und","arrowFunctionSingle","arrowFunction","inlineFunction","group","Infinity","void","await","new","throw","initialize","return","spreadObject","spreadArray","expEnd","expFunction","function","expSingle","for","do","while","loopAction","if","try","block","switch","closings","(","[","{","'","\"","`","testMultiple","str","tests","found","i","exec","CodeString","ref","start","end","len","toString","trimStart","emptyString","okFirstChars","aNumber","wordReg","semiColon","insertedSemicolons","WeakMap","quoteCache","restOfExp","constants","part","quote","firstOpening","closingsTests","details","words","isStart","hasSemiTest","includes","filter","insertedSemis","cache","set","has","escape","done","lastChar","isOneLiner","lastInertedSemi","char","skip","regRes","foundWord","foundNumber","sub","push","lastAnyWord","lastWord","test","oneliner","startingExecpted","setLispType","fn","forEach","type","closingsCreate","extractIfElse","foundTrue","elseReg","count","foundElse","first","startsWith","all","Math","max","true","false","res","expect","ctx","extract","arg","l","funcFound","lispifyExpr","map","e","lispify","lispTree","quoteCount","condition","ie","startTrue","trueBlock","elseBlock","trim","lispifyBlock","indexOf","caseFound","statement","insertSemicolons","caseTest","cases","defaultFound","cond","bracketFound","exprs","notEmpty","index","matches","primitives","BigInt","JSON","parse","isArrow","isReturn","argPos","isAsync","args","split","unshift","ended","func","eager","lispifyFunction","iteratorRegex","getIterator","body","startStep","startInternal","beforeStep","checkFirst","step","iterator","extract2","k","ofStart2","ofStart3","ofCondition","ofStep","inStart2","inStart3","inStep","inCondition","shift","isBlock","catchReg","finallyBody","exception","catchBody","catchRes","offset","argsString","j","lastType","expected","topLevel","startingExpectedWithoutSingle","r","subExpressions","pos","Object","values","defined","expression","parts","skipped","isInserted","flat","tree","hoisted","hoist","concat","Array","isArray","rep","it","closingsNoInsertion","colonsRegex","rest","inserted","valid","edge","checkRegex","cancel","after","flags","notDivide","possibleDivide","extractConstants","currentEnclosure","regexFound","comment","commentStart","currJs","strRes","enclosures","isPossibleDivide","literals","join","strings","pop","regexes","js","ExecReturn","auditReport","result","returned","breakLoop","continueLoop","Prop","context","isConst","isGlobal","isVariable","optional","Symbol","reservedWords","Set","VarType","keysOnly","ret","Scope","parent","vars","functionThis","isFuncScope","allVars","let","var","globals","functionScope","hasOwnProperty","const","ReferenceError","TypeError","SandboxError","declare","FunctionScope","LocalScope","currentTicks","sandboxFunction","ticks","SandboxFunction","params","parsed","createFunction","generateArgs","argNames","sandboxedFunctions","WeakSet","scope","name","options","forbidFunctionCreation","executeTree","add","createFunctionAsync","prototypeWhitelist","Promise","async","executeTreeAsync","sandboxedEval","sandboxedSetTimeout","handler","setTimeout","sandboxedSetInterval","setInterval","assignCheck","changeSubscriptions","cb","setSubscriptions","arrayChange","splice","reverse","sort","copyWithin","literalRegex","ops2","sandboxGlobal","audit","globalsAccess","globalsWhitelist","evals","globalThis","globalScope","getSubscriptions","Boolean","isFunction","prototypeAccess","prot","constructor","prototype","getPrototypeOf","whitelist","prototypeReplacements","size","constuctor","g","forbidFunctionCalls","execMany","vals","stringify","recurse","x","y","change","changed","added","removed","startIndex","deleteCount","min","endIndex","keyVal","reg","RegExp","resnums","processed","reses","num","$$","$","!","~","++$","$++","--$","$--","=","+=","-=","/=","*=","**=","%=","^=","&=","|=","<<=",">>=",">>>=","?",">","<",">=","<=","==","===","!=","!==","&&","||","&","|",":","+","-","$+","$-","/","^","*","%","<<",">>",">>>","instanceof","in","bobj","arrowFunc","loop","loopScope","internalVars","$$obj","interalScope","execAsync","asyncDone","d","innerLoopVars","catch","syncDone","inLoopOrSwitch","executeTreeWithDone","toTest","execSync","isTrue","caseItem","valueOrProp","multi","ops","_execManySync","_execManyAsync","callback","resolve","reject","execWithDone","executionQuota","onExecutionQuotaReached","executionTree","scopes","s","_executeWithDoneSync","_executeWithDoneAsync","current","SandboxGlobal","Sandbox","SAFE_GLOBALS","SAFE_PROTOTYPES","sandbox","Function","eval","console","debug","error","info","log","table","warn","isFinite","parseFloat","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","unescape","EvalError","URIError","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Intl","Date","protos","proto","unsubscribe","names","callbacks","changeCbs","getOwnPropertyNames","optimize"],"mappings":"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"}